### YamlMime:ManagedReference
items:
- uid: MonoTorrent.PieceWriter.IBlockCache
  commentId: T:MonoTorrent.PieceWriter.IBlockCache
  id: IBlockCache
  parent: MonoTorrent.PieceWriter
  children:
  - MonoTorrent.PieceWriter.IBlockCache.CacheHits
  - MonoTorrent.PieceWriter.IBlockCache.CacheUsed
  - MonoTorrent.PieceWriter.IBlockCache.Capacity
  - MonoTorrent.PieceWriter.IBlockCache.Policy
  - MonoTorrent.PieceWriter.IBlockCache.ReadAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte})
  - MonoTorrent.PieceWriter.IBlockCache.ReadFromCache
  - MonoTorrent.PieceWriter.IBlockCache.ReadFromCacheAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte})
  - MonoTorrent.PieceWriter.IBlockCache.ReadThroughCache
  - MonoTorrent.PieceWriter.IBlockCache.SetCapacityAsync(System.Int64)
  - MonoTorrent.PieceWriter.IBlockCache.SetPolicyAsync(MonoTorrent.PieceWriter.CachePolicy)
  - MonoTorrent.PieceWriter.IBlockCache.SetWriterAsync(MonoTorrent.PieceWriter.IPieceWriter)
  - MonoTorrent.PieceWriter.IBlockCache.WriteAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte},System.Boolean)
  - MonoTorrent.PieceWriter.IBlockCache.Writer
  - MonoTorrent.PieceWriter.IBlockCache.WrittenThroughCache
  - MonoTorrent.PieceWriter.IBlockCache.WrittenToCache
  langs:
  - csharp
  - vb
  name: IBlockCache
  nameWithType: IBlockCache
  fullName: MonoTorrent.PieceWriter.IBlockCache
  type: Interface
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: IBlockCache
    path: src/PieceWriter/IBlockCache.cs
    startLine: 35
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  syntax:
    content: 'public interface IBlockCache : IDisposable'
    content.vb: Public Interface IBlockCache Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
- uid: MonoTorrent.PieceWriter.IBlockCache.ReadFromCache
  commentId: E:MonoTorrent.PieceWriter.IBlockCache.ReadFromCache
  id: ReadFromCache
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: ReadFromCache
  nameWithType: IBlockCache.ReadFromCache
  fullName: MonoTorrent.PieceWriter.IBlockCache.ReadFromCache
  type: Event
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: ReadFromCache
    path: src/PieceWriter/IBlockCache.cs
    startLine: 40
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: This event is raised every time a block is successfully read from the cache
  example: []
  syntax:
    content: event EventHandler<BlockInfo> ReadFromCache
    return:
      type: System.EventHandler{MonoTorrent.BlockInfo}
    content.vb: Event ReadFromCache As EventHandler(Of BlockInfo)
- uid: MonoTorrent.PieceWriter.IBlockCache.ReadThroughCache
  commentId: E:MonoTorrent.PieceWriter.IBlockCache.ReadThroughCache
  id: ReadThroughCache
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: ReadThroughCache
  nameWithType: IBlockCache.ReadThroughCache
  fullName: MonoTorrent.PieceWriter.IBlockCache.ReadThroughCache
  type: Event
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: ReadThroughCache
    path: src/PieceWriter/IBlockCache.cs
    startLine: 45
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: >-
    This event is raised every time a block cannot be read from the cache, and is read from

    the underlying <xref href="MonoTorrent.PieceWriter.IPieceWriter" data-throw-if-not-resolved="false"></xref> instead.
  example: []
  syntax:
    content: event EventHandler<BlockInfo> ReadThroughCache
    return:
      type: System.EventHandler{MonoTorrent.BlockInfo}
    content.vb: Event ReadThroughCache As EventHandler(Of BlockInfo)
- uid: MonoTorrent.PieceWriter.IBlockCache.WrittenToCache
  commentId: E:MonoTorrent.PieceWriter.IBlockCache.WrittenToCache
  id: WrittenToCache
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: WrittenToCache
  nameWithType: IBlockCache.WrittenToCache
  fullName: MonoTorrent.PieceWriter.IBlockCache.WrittenToCache
  type: Event
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: WrittenToCache
    path: src/PieceWriter/IBlockCache.cs
    startLine: 50
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: This event is raised when a block is written to the cache.
  example: []
  syntax:
    content: event EventHandler<BlockInfo> WrittenToCache
    return:
      type: System.EventHandler{MonoTorrent.BlockInfo}
    content.vb: Event WrittenToCache As EventHandler(Of BlockInfo)
- uid: MonoTorrent.PieceWriter.IBlockCache.WrittenThroughCache
  commentId: E:MonoTorrent.PieceWriter.IBlockCache.WrittenThroughCache
  id: WrittenThroughCache
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: WrittenThroughCache
  nameWithType: IBlockCache.WrittenThroughCache
  fullName: MonoTorrent.PieceWriter.IBlockCache.WrittenThroughCache
  type: Event
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: WrittenThroughCache
    path: src/PieceWriter/IBlockCache.cs
    startLine: 55
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: >-
    This event is raised when a new block is written directly by the underlying <xref href="MonoTorrent.PieceWriter.IPieceWriter" data-throw-if-not-resolved="false"></xref>,

    or when a block is removed from the cache and is written by the underlying <xref href="MonoTorrent.PieceWriter.IPieceWriter" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: event EventHandler<BlockInfo> WrittenThroughCache
    return:
      type: System.EventHandler{MonoTorrent.BlockInfo}
    content.vb: Event WrittenThroughCache As EventHandler(Of BlockInfo)
- uid: MonoTorrent.PieceWriter.IBlockCache.CacheHits
  commentId: P:MonoTorrent.PieceWriter.IBlockCache.CacheHits
  id: CacheHits
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: CacheHits
  nameWithType: IBlockCache.CacheHits
  fullName: MonoTorrent.PieceWriter.IBlockCache.CacheHits
  type: Property
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CacheHits
    path: src/PieceWriter/IBlockCache.cs
    startLine: 60
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: The number of bytes read from the cache.
  example: []
  syntax:
    content: long CacheHits { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property CacheHits As Long
  overload: MonoTorrent.PieceWriter.IBlockCache.CacheHits*
- uid: MonoTorrent.PieceWriter.IBlockCache.CacheUsed
  commentId: P:MonoTorrent.PieceWriter.IBlockCache.CacheUsed
  id: CacheUsed
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: CacheUsed
  nameWithType: IBlockCache.CacheUsed
  fullName: MonoTorrent.PieceWriter.IBlockCache.CacheUsed
  type: Property
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CacheUsed
    path: src/PieceWriter/IBlockCache.cs
    startLine: 65
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: The number of bytes currently used by the cache.
  example: []
  syntax:
    content: long CacheUsed { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property CacheUsed As Long
  overload: MonoTorrent.PieceWriter.IBlockCache.CacheUsed*
- uid: MonoTorrent.PieceWriter.IBlockCache.Capacity
  commentId: P:MonoTorrent.PieceWriter.IBlockCache.Capacity
  id: Capacity
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: IBlockCache.Capacity
  fullName: MonoTorrent.PieceWriter.IBlockCache.Capacity
  type: Property
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: Capacity
    path: src/PieceWriter/IBlockCache.cs
    startLine: 70
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: The capacity of the cache, in bytes.
  example: []
  syntax:
    content: long Capacity { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property Capacity As Long
  overload: MonoTorrent.PieceWriter.IBlockCache.Capacity*
- uid: MonoTorrent.PieceWriter.IBlockCache.Policy
  commentId: P:MonoTorrent.PieceWriter.IBlockCache.Policy
  id: Policy
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: Policy
  nameWithType: IBlockCache.Policy
  fullName: MonoTorrent.PieceWriter.IBlockCache.Policy
  type: Property
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: Policy
    path: src/PieceWriter/IBlockCache.cs
    startLine: 72
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  syntax:
    content: CachePolicy Policy { get; }
    parameters: []
    return:
      type: MonoTorrent.PieceWriter.CachePolicy
    content.vb: ReadOnly Property Policy As CachePolicy
  overload: MonoTorrent.PieceWriter.IBlockCache.Policy*
- uid: MonoTorrent.PieceWriter.IBlockCache.Writer
  commentId: P:MonoTorrent.PieceWriter.IBlockCache.Writer
  id: Writer
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: Writer
  nameWithType: IBlockCache.Writer
  fullName: MonoTorrent.PieceWriter.IBlockCache.Writer
  type: Property
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: Writer
    path: src/PieceWriter/IBlockCache.cs
    startLine: 77
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Pieces will be written to this <xref href="MonoTorrent.PieceWriter.IPieceWriter" data-throw-if-not-resolved="false"></xref> when they are evicted from the cache.
  example: []
  syntax:
    content: IPieceWriter Writer { get; }
    parameters: []
    return:
      type: MonoTorrent.PieceWriter.IPieceWriter
    content.vb: ReadOnly Property Writer As IPieceWriter
  overload: MonoTorrent.PieceWriter.IBlockCache.Writer*
- uid: MonoTorrent.PieceWriter.IBlockCache.ReadAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte})
  commentId: M:MonoTorrent.PieceWriter.IBlockCache.ReadAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte})
  id: ReadAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte})
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: ReadAsync(ITorrentManagerInfo, BlockInfo, Memory<byte>)
  nameWithType: IBlockCache.ReadAsync(ITorrentManagerInfo, BlockInfo, Memory<byte>)
  fullName: MonoTorrent.PieceWriter.IBlockCache.ReadAsync(MonoTorrent.ITorrentManagerInfo, MonoTorrent.BlockInfo, System.Memory<byte>)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: ReadAsync
    path: src/PieceWriter/IBlockCache.cs
    startLine: 86
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Reads data from the cache and flushes it to disk, or reads the data from disk if it is not available in the cache.
  example: []
  syntax:
    content: ReusableTask<bool> ReadAsync(ITorrentManagerInfo torrent, BlockInfo block, Memory<byte> buffer)
    parameters:
    - id: torrent
      type: MonoTorrent.ITorrentManagerInfo
      description: ''
    - id: block
      type: MonoTorrent.BlockInfo
      description: ''
    - id: buffer
      type: System.Memory{System.Byte}
      description: ''
    return:
      type: ReusableTasks.ReusableTask{System.Boolean}
      description: ''
    content.vb: Function ReadAsync(torrent As ITorrentManagerInfo, block As BlockInfo, buffer As Memory(Of Byte)) As ReusableTask(Of Boolean)
  overload: MonoTorrent.PieceWriter.IBlockCache.ReadAsync*
  nameWithType.vb: IBlockCache.ReadAsync(ITorrentManagerInfo, BlockInfo, Memory(Of Byte))
  fullName.vb: MonoTorrent.PieceWriter.IBlockCache.ReadAsync(MonoTorrent.ITorrentManagerInfo, MonoTorrent.BlockInfo, System.Memory(Of Byte))
  name.vb: ReadAsync(ITorrentManagerInfo, BlockInfo, Memory(Of Byte))
- uid: MonoTorrent.PieceWriter.IBlockCache.ReadFromCacheAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte})
  commentId: M:MonoTorrent.PieceWriter.IBlockCache.ReadFromCacheAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte})
  id: ReadFromCacheAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte})
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: ReadFromCacheAsync(ITorrentManagerInfo, BlockInfo, Memory<byte>)
  nameWithType: IBlockCache.ReadFromCacheAsync(ITorrentManagerInfo, BlockInfo, Memory<byte>)
  fullName: MonoTorrent.PieceWriter.IBlockCache.ReadFromCacheAsync(MonoTorrent.ITorrentManagerInfo, MonoTorrent.BlockInfo, System.Memory<byte>)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: ReadFromCacheAsync
    path: src/PieceWriter/IBlockCache.cs
    startLine: 96
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: >-
    If the block of data is available in the cache, the data is read into the buffer and the method returns true.

    If the block is unavailable, the buffer will not be modified and the method will return false.
  example: []
  syntax:
    content: ReusableTask<bool> ReadFromCacheAsync(ITorrentManagerInfo torrent, BlockInfo block, Memory<byte> buffer)
    parameters:
    - id: torrent
      type: MonoTorrent.ITorrentManagerInfo
      description: ''
    - id: block
      type: MonoTorrent.BlockInfo
      description: ''
    - id: buffer
      type: System.Memory{System.Byte}
      description: ''
    return:
      type: ReusableTasks.ReusableTask{System.Boolean}
      description: ''
    content.vb: Function ReadFromCacheAsync(torrent As ITorrentManagerInfo, block As BlockInfo, buffer As Memory(Of Byte)) As ReusableTask(Of Boolean)
  overload: MonoTorrent.PieceWriter.IBlockCache.ReadFromCacheAsync*
  nameWithType.vb: IBlockCache.ReadFromCacheAsync(ITorrentManagerInfo, BlockInfo, Memory(Of Byte))
  fullName.vb: MonoTorrent.PieceWriter.IBlockCache.ReadFromCacheAsync(MonoTorrent.ITorrentManagerInfo, MonoTorrent.BlockInfo, System.Memory(Of Byte))
  name.vb: ReadFromCacheAsync(ITorrentManagerInfo, BlockInfo, Memory(Of Byte))
- uid: MonoTorrent.PieceWriter.IBlockCache.SetCapacityAsync(System.Int64)
  commentId: M:MonoTorrent.PieceWriter.IBlockCache.SetCapacityAsync(System.Int64)
  id: SetCapacityAsync(System.Int64)
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: SetCapacityAsync(long)
  nameWithType: IBlockCache.SetCapacityAsync(long)
  fullName: MonoTorrent.PieceWriter.IBlockCache.SetCapacityAsync(long)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: SetCapacityAsync
    path: src/PieceWriter/IBlockCache.cs
    startLine: 103
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Set the max capacity, in bytes.
  example: []
  syntax:
    content: ReusableTask SetCapacityAsync(long capacity)
    parameters:
    - id: capacity
      type: System.Int64
      description: ''
    return:
      type: ReusableTasks.ReusableTask
      description: ''
    content.vb: Function SetCapacityAsync(capacity As Long) As ReusableTask
  overload: MonoTorrent.PieceWriter.IBlockCache.SetCapacityAsync*
  nameWithType.vb: IBlockCache.SetCapacityAsync(Long)
  fullName.vb: MonoTorrent.PieceWriter.IBlockCache.SetCapacityAsync(Long)
  name.vb: SetCapacityAsync(Long)
- uid: MonoTorrent.PieceWriter.IBlockCache.SetPolicyAsync(MonoTorrent.PieceWriter.CachePolicy)
  commentId: M:MonoTorrent.PieceWriter.IBlockCache.SetPolicyAsync(MonoTorrent.PieceWriter.CachePolicy)
  id: SetPolicyAsync(MonoTorrent.PieceWriter.CachePolicy)
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: SetPolicyAsync(CachePolicy)
  nameWithType: IBlockCache.SetPolicyAsync(CachePolicy)
  fullName: MonoTorrent.PieceWriter.IBlockCache.SetPolicyAsync(MonoTorrent.PieceWriter.CachePolicy)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: SetPolicyAsync
    path: src/PieceWriter/IBlockCache.cs
    startLine: 110
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Sets the cache policy.
  example: []
  syntax:
    content: ReusableTask SetPolicyAsync(CachePolicy policy)
    parameters:
    - id: policy
      type: MonoTorrent.PieceWriter.CachePolicy
      description: ''
    return:
      type: ReusableTasks.ReusableTask
      description: ''
    content.vb: Function SetPolicyAsync(policy As CachePolicy) As ReusableTask
  overload: MonoTorrent.PieceWriter.IBlockCache.SetPolicyAsync*
- uid: MonoTorrent.PieceWriter.IBlockCache.SetWriterAsync(MonoTorrent.PieceWriter.IPieceWriter)
  commentId: M:MonoTorrent.PieceWriter.IBlockCache.SetWriterAsync(MonoTorrent.PieceWriter.IPieceWriter)
  id: SetWriterAsync(MonoTorrent.PieceWriter.IPieceWriter)
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: SetWriterAsync(IPieceWriter)
  nameWithType: IBlockCache.SetWriterAsync(IPieceWriter)
  fullName: MonoTorrent.PieceWriter.IBlockCache.SetWriterAsync(MonoTorrent.PieceWriter.IPieceWriter)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: SetWriterAsync
    path: src/PieceWriter/IBlockCache.cs
    startLine: 112
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  syntax:
    content: ReusableTask SetWriterAsync(IPieceWriter writer)
    parameters:
    - id: writer
      type: MonoTorrent.PieceWriter.IPieceWriter
    return:
      type: ReusableTasks.ReusableTask
    content.vb: Function SetWriterAsync(writer As IPieceWriter) As ReusableTask
  overload: MonoTorrent.PieceWriter.IBlockCache.SetWriterAsync*
- uid: MonoTorrent.PieceWriter.IBlockCache.WriteAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte},System.Boolean)
  commentId: M:MonoTorrent.PieceWriter.IBlockCache.WriteAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte},System.Boolean)
  id: WriteAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte},System.Boolean)
  parent: MonoTorrent.PieceWriter.IBlockCache
  langs:
  - csharp
  - vb
  name: WriteAsync(ITorrentManagerInfo, BlockInfo, Memory<byte>, bool)
  nameWithType: IBlockCache.WriteAsync(ITorrentManagerInfo, BlockInfo, Memory<byte>, bool)
  fullName: MonoTorrent.PieceWriter.IBlockCache.WriteAsync(MonoTorrent.ITorrentManagerInfo, MonoTorrent.BlockInfo, System.Memory<byte>, bool)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/IBlockCache.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: WriteAsync
    path: src/PieceWriter/IBlockCache.cs
    startLine: 122
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: ''
  example: []
  syntax:
    content: ReusableTask WriteAsync(ITorrentManagerInfo torrent, BlockInfo block, Memory<byte> buffer, bool preferSkipCache)
    parameters:
    - id: torrent
      type: MonoTorrent.ITorrentManagerInfo
      description: ''
    - id: block
      type: MonoTorrent.BlockInfo
      description: ''
    - id: buffer
      type: System.Memory{System.Byte}
      description: ''
    - id: preferSkipCache
      type: System.Boolean
      description: ''
    return:
      type: ReusableTasks.ReusableTask
      description: ''
    content.vb: Function WriteAsync(torrent As ITorrentManagerInfo, block As BlockInfo, buffer As Memory(Of Byte), preferSkipCache As Boolean) As ReusableTask
  overload: MonoTorrent.PieceWriter.IBlockCache.WriteAsync*
  nameWithType.vb: IBlockCache.WriteAsync(ITorrentManagerInfo, BlockInfo, Memory(Of Byte), Boolean)
  fullName.vb: MonoTorrent.PieceWriter.IBlockCache.WriteAsync(MonoTorrent.ITorrentManagerInfo, MonoTorrent.BlockInfo, System.Memory(Of Byte), Boolean)
  name.vb: WriteAsync(ITorrentManagerInfo, BlockInfo, Memory(Of Byte), Boolean)
references:
- uid: MonoTorrent.PieceWriter
  commentId: N:MonoTorrent.PieceWriter
  href: MonoTorrent.html
  name: MonoTorrent.PieceWriter
  nameWithType: MonoTorrent.PieceWriter
  fullName: MonoTorrent.PieceWriter
  spec.csharp:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.PieceWriter
    name: PieceWriter
    href: MonoTorrent.PieceWriter.html
  spec.vb:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.PieceWriter
    name: PieceWriter
    href: MonoTorrent.PieceWriter.html
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.EventHandler{MonoTorrent.BlockInfo}
  commentId: T:System.EventHandler{MonoTorrent.BlockInfo}
  parent: System
  definition: System.EventHandler`1
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<BlockInfo>
  nameWithType: EventHandler<BlockInfo>
  fullName: System.EventHandler<MonoTorrent.BlockInfo>
  nameWithType.vb: EventHandler(Of BlockInfo)
  fullName.vb: System.EventHandler(Of MonoTorrent.BlockInfo)
  name.vb: EventHandler(Of BlockInfo)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - uid: MonoTorrent.BlockInfo
    name: BlockInfo
    href: MonoTorrent.BlockInfo.html
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - uid: MonoTorrent.BlockInfo
    name: BlockInfo
    href: MonoTorrent.BlockInfo.html
  - name: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - name: TEventArgs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - name: TEventArgs
  - name: )
- uid: MonoTorrent.PieceWriter.IPieceWriter
  commentId: T:MonoTorrent.PieceWriter.IPieceWriter
  parent: MonoTorrent.PieceWriter
  href: MonoTorrent.PieceWriter.IPieceWriter.html
  name: IPieceWriter
  nameWithType: IPieceWriter
  fullName: MonoTorrent.PieceWriter.IPieceWriter
- uid: MonoTorrent.PieceWriter.IBlockCache.CacheHits*
  commentId: Overload:MonoTorrent.PieceWriter.IBlockCache.CacheHits
  href: MonoTorrent.PieceWriter.IBlockCache.html#MonoTorrent_PieceWriter_IBlockCache_CacheHits
  name: CacheHits
  nameWithType: IBlockCache.CacheHits
  fullName: MonoTorrent.PieceWriter.IBlockCache.CacheHits
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: MonoTorrent.PieceWriter.IBlockCache.CacheUsed*
  commentId: Overload:MonoTorrent.PieceWriter.IBlockCache.CacheUsed
  href: MonoTorrent.PieceWriter.IBlockCache.html#MonoTorrent_PieceWriter_IBlockCache_CacheUsed
  name: CacheUsed
  nameWithType: IBlockCache.CacheUsed
  fullName: MonoTorrent.PieceWriter.IBlockCache.CacheUsed
- uid: MonoTorrent.PieceWriter.IBlockCache.Capacity*
  commentId: Overload:MonoTorrent.PieceWriter.IBlockCache.Capacity
  href: MonoTorrent.PieceWriter.IBlockCache.html#MonoTorrent_PieceWriter_IBlockCache_Capacity
  name: Capacity
  nameWithType: IBlockCache.Capacity
  fullName: MonoTorrent.PieceWriter.IBlockCache.Capacity
- uid: MonoTorrent.PieceWriter.IBlockCache.Policy*
  commentId: Overload:MonoTorrent.PieceWriter.IBlockCache.Policy
  href: MonoTorrent.PieceWriter.IBlockCache.html#MonoTorrent_PieceWriter_IBlockCache_Policy
  name: Policy
  nameWithType: IBlockCache.Policy
  fullName: MonoTorrent.PieceWriter.IBlockCache.Policy
- uid: MonoTorrent.PieceWriter.CachePolicy
  commentId: T:MonoTorrent.PieceWriter.CachePolicy
  parent: MonoTorrent.PieceWriter
  href: MonoTorrent.PieceWriter.CachePolicy.html
  name: CachePolicy
  nameWithType: CachePolicy
  fullName: MonoTorrent.PieceWriter.CachePolicy
- uid: MonoTorrent.PieceWriter.IBlockCache.Writer*
  commentId: Overload:MonoTorrent.PieceWriter.IBlockCache.Writer
  href: MonoTorrent.PieceWriter.IBlockCache.html#MonoTorrent_PieceWriter_IBlockCache_Writer
  name: Writer
  nameWithType: IBlockCache.Writer
  fullName: MonoTorrent.PieceWriter.IBlockCache.Writer
- uid: MonoTorrent.PieceWriter.IBlockCache.ReadAsync*
  commentId: Overload:MonoTorrent.PieceWriter.IBlockCache.ReadAsync
  href: MonoTorrent.PieceWriter.IBlockCache.html#MonoTorrent_PieceWriter_IBlockCache_ReadAsync_MonoTorrent_ITorrentManagerInfo_MonoTorrent_BlockInfo_System_Memory_System_Byte__
  name: ReadAsync
  nameWithType: IBlockCache.ReadAsync
  fullName: MonoTorrent.PieceWriter.IBlockCache.ReadAsync
- uid: MonoTorrent.ITorrentManagerInfo
  commentId: T:MonoTorrent.ITorrentManagerInfo
  parent: MonoTorrent
  href: MonoTorrent.ITorrentManagerInfo.html
  name: ITorrentManagerInfo
  nameWithType: ITorrentManagerInfo
  fullName: MonoTorrent.ITorrentManagerInfo
- uid: MonoTorrent.BlockInfo
  commentId: T:MonoTorrent.BlockInfo
  parent: MonoTorrent
  href: MonoTorrent.BlockInfo.html
  name: BlockInfo
  nameWithType: BlockInfo
  fullName: MonoTorrent.BlockInfo
- uid: System.Memory{System.Byte}
  commentId: T:System.Memory{System.Byte}
  parent: System
  definition: System.Memory`1
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<byte>
  nameWithType: Memory<byte>
  fullName: System.Memory<byte>
  nameWithType.vb: Memory(Of Byte)
  fullName.vb: System.Memory(Of Byte)
  name.vb: Memory(Of Byte)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: ReusableTasks.ReusableTask{System.Boolean}
  commentId: T:ReusableTasks.ReusableTask{System.Boolean}
  parent: ReusableTasks
  definition: ReusableTasks.ReusableTask`1
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: ReusableTask<bool>
  nameWithType: ReusableTask<bool>
  fullName: ReusableTasks.ReusableTask<bool>
  nameWithType.vb: ReusableTask(Of Boolean)
  fullName.vb: ReusableTasks.ReusableTask(Of Boolean)
  name.vb: ReusableTask(Of Boolean)
  spec.csharp:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: MonoTorrent
  commentId: N:MonoTorrent
  href: MonoTorrent.html
  name: MonoTorrent
  nameWithType: MonoTorrent
  fullName: MonoTorrent
- uid: System.Memory`1
  commentId: T:System.Memory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ReusableTasks.ReusableTask`1
  commentId: T:ReusableTasks.ReusableTask`1
  isExternal: true
  name: ReusableTask<T>
  nameWithType: ReusableTask<T>
  fullName: ReusableTasks.ReusableTask<T>
  nameWithType.vb: ReusableTask(Of T)
  fullName.vb: ReusableTasks.ReusableTask(Of T)
  name.vb: ReusableTask(Of T)
  spec.csharp:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ReusableTasks
  commentId: N:ReusableTasks
  isExternal: true
  name: ReusableTasks
  nameWithType: ReusableTasks
  fullName: ReusableTasks
- uid: MonoTorrent.PieceWriter.IBlockCache.ReadFromCacheAsync*
  commentId: Overload:MonoTorrent.PieceWriter.IBlockCache.ReadFromCacheAsync
  href: MonoTorrent.PieceWriter.IBlockCache.html#MonoTorrent_PieceWriter_IBlockCache_ReadFromCacheAsync_MonoTorrent_ITorrentManagerInfo_MonoTorrent_BlockInfo_System_Memory_System_Byte__
  name: ReadFromCacheAsync
  nameWithType: IBlockCache.ReadFromCacheAsync
  fullName: MonoTorrent.PieceWriter.IBlockCache.ReadFromCacheAsync
- uid: MonoTorrent.PieceWriter.IBlockCache.SetCapacityAsync*
  commentId: Overload:MonoTorrent.PieceWriter.IBlockCache.SetCapacityAsync
  href: MonoTorrent.PieceWriter.IBlockCache.html#MonoTorrent_PieceWriter_IBlockCache_SetCapacityAsync_System_Int64_
  name: SetCapacityAsync
  nameWithType: IBlockCache.SetCapacityAsync
  fullName: MonoTorrent.PieceWriter.IBlockCache.SetCapacityAsync
- uid: ReusableTasks.ReusableTask
  commentId: T:ReusableTasks.ReusableTask
  parent: ReusableTasks
  isExternal: true
  name: ReusableTask
  nameWithType: ReusableTask
  fullName: ReusableTasks.ReusableTask
- uid: MonoTorrent.PieceWriter.IBlockCache.SetPolicyAsync*
  commentId: Overload:MonoTorrent.PieceWriter.IBlockCache.SetPolicyAsync
  href: MonoTorrent.PieceWriter.IBlockCache.html#MonoTorrent_PieceWriter_IBlockCache_SetPolicyAsync_MonoTorrent_PieceWriter_CachePolicy_
  name: SetPolicyAsync
  nameWithType: IBlockCache.SetPolicyAsync
  fullName: MonoTorrent.PieceWriter.IBlockCache.SetPolicyAsync
- uid: MonoTorrent.PieceWriter.IBlockCache.SetWriterAsync*
  commentId: Overload:MonoTorrent.PieceWriter.IBlockCache.SetWriterAsync
  href: MonoTorrent.PieceWriter.IBlockCache.html#MonoTorrent_PieceWriter_IBlockCache_SetWriterAsync_MonoTorrent_PieceWriter_IPieceWriter_
  name: SetWriterAsync
  nameWithType: IBlockCache.SetWriterAsync
  fullName: MonoTorrent.PieceWriter.IBlockCache.SetWriterAsync
- uid: MonoTorrent.PieceWriter.IBlockCache.WriteAsync*
  commentId: Overload:MonoTorrent.PieceWriter.IBlockCache.WriteAsync
  href: MonoTorrent.PieceWriter.IBlockCache.html#MonoTorrent_PieceWriter_IBlockCache_WriteAsync_MonoTorrent_ITorrentManagerInfo_MonoTorrent_BlockInfo_System_Memory_System_Byte__System_Boolean_
  name: WriteAsync
  nameWithType: IBlockCache.WriteAsync
  fullName: MonoTorrent.PieceWriter.IBlockCache.WriteAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
