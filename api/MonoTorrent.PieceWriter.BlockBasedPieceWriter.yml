### YamlMime:ManagedReference
items:
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  commentId: T:MonoTorrent.PieceWriter.BlockBasedPieceWriter
  id: BlockBasedPieceWriter
  parent: MonoTorrent.PieceWriter
  children:
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.#ctor(MonoTorrent.BlockReader.IBlockReader,MonoTorrent.PieceWriter.IBlockWriter,System.Collections.Generic.IEnumerable{MonoTorrent.ITorrentManagerInfo})
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.CloseAsync(MonoTorrent.ITorrentManagerFile)
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.CreateAsync(MonoTorrent.ITorrentManagerFile,MonoTorrent.PieceWriter.FileCreationOptions)
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.Dispose
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.ExistsAsync(MonoTorrent.ITorrentManagerFile)
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.FlushAsync(MonoTorrent.ITorrentManagerFile)
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.GetLengthAsync(MonoTorrent.ITorrentManagerFile)
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.MaximumOpenFiles
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile,System.String,System.Boolean)
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.OpenFiles
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile,System.Int64)
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetMaximumOpenFilesAsync(System.Int32)
  - MonoTorrent.PieceWriter.BlockBasedPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  langs:
  - csharp
  - vb
  name: BlockBasedPieceWriter
  nameWithType: BlockBasedPieceWriter
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  type: Class
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: BlockBasedPieceWriter
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 11
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  syntax:
    content: 'public sealed class BlockBasedPieceWriter : IPieceWriter, IDisposable'
    content.vb: Public NotInheritable Class BlockBasedPieceWriter Implements IPieceWriter, IDisposable
  inheritance:
  - System.Object
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - MonoTorrent.PieceWriter.IPieceWriter.MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  - MonoTorrent.PieceWriter.IPieceWriter.MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.#ctor(MonoTorrent.BlockReader.IBlockReader,MonoTorrent.PieceWriter.IBlockWriter,System.Collections.Generic.IEnumerable{MonoTorrent.ITorrentManagerInfo})
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.#ctor(MonoTorrent.BlockReader.IBlockReader,MonoTorrent.PieceWriter.IBlockWriter,System.Collections.Generic.IEnumerable{MonoTorrent.ITorrentManagerInfo})
  id: '#ctor(MonoTorrent.BlockReader.IBlockReader,MonoTorrent.PieceWriter.IBlockWriter,System.Collections.Generic.IEnumerable{MonoTorrent.ITorrentManagerInfo})'
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: BlockBasedPieceWriter(IBlockReader, IBlockWriter, IEnumerable<ITorrentManagerInfo>)
  nameWithType: BlockBasedPieceWriter.BlockBasedPieceWriter(IBlockReader, IBlockWriter, IEnumerable<ITorrentManagerInfo>)
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.BlockBasedPieceWriter(MonoTorrent.BlockReader.IBlockReader, MonoTorrent.PieceWriter.IBlockWriter, System.Collections.Generic.IEnumerable<MonoTorrent.ITorrentManagerInfo>)
  type: Constructor
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: .ctor
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 17
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  syntax:
    content: public BlockBasedPieceWriter(IBlockReader reader, IBlockWriter writer, IEnumerable<ITorrentManagerInfo> torrents)
    parameters:
    - id: reader
      type: MonoTorrent.BlockReader.IBlockReader
    - id: writer
      type: MonoTorrent.PieceWriter.IBlockWriter
    - id: torrents
      type: System.Collections.Generic.IEnumerable{MonoTorrent.ITorrentManagerInfo}
    content.vb: Public Sub New(reader As IBlockReader, writer As IBlockWriter, torrents As IEnumerable(Of ITorrentManagerInfo))
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.#ctor*
  nameWithType.vb: BlockBasedPieceWriter.New(IBlockReader, IBlockWriter, IEnumerable(Of ITorrentManagerInfo))
  fullName.vb: MonoTorrent.PieceWriter.BlockBasedPieceWriter.New(MonoTorrent.BlockReader.IBlockReader, MonoTorrent.PieceWriter.IBlockWriter, System.Collections.Generic.IEnumerable(Of MonoTorrent.ITorrentManagerInfo))
  name.vb: New(IBlockReader, IBlockWriter, IEnumerable(Of ITorrentManagerInfo))
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  id: ReadAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: ReadAsync(ITorrentManagerFile, long, Memory<byte>)
  nameWithType: BlockBasedPieceWriter.ReadAsync(ITorrentManagerFile, long, Memory<byte>)
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile, long, System.Memory<byte>)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: ReadAsync
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 24
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Reads the specified amount of data from the specified file.
  example: []
  syntax:
    content: public ReusableTask<int> ReadAsync(ITorrentManagerFile file, long offset, Memory<byte> buffer)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: ''
    - id: offset
      type: System.Int64
      description: ''
    - id: buffer
      type: System.Memory{System.Byte}
      description: ''
    return:
      type: ReusableTasks.ReusableTask{System.Int32}
      description: ''
    content.vb: Public Function ReadAsync(file As ITorrentManagerFile, offset As Long, buffer As Memory(Of Byte)) As ReusableTask(Of Integer)
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.ReadAsync*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  nameWithType.vb: BlockBasedPieceWriter.ReadAsync(ITorrentManagerFile, Long, Memory(Of Byte))
  fullName.vb: MonoTorrent.PieceWriter.BlockBasedPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile, Long, System.Memory(Of Byte))
  name.vb: ReadAsync(ITorrentManagerFile, Long, Memory(Of Byte))
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  id: WriteAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: WriteAsync(ITorrentManagerFile, long, ReadOnlyMemory<byte>)
  nameWithType: BlockBasedPieceWriter.WriteAsync(ITorrentManagerFile, long, ReadOnlyMemory<byte>)
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile, long, System.ReadOnlyMemory<byte>)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: WriteAsync
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 37
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: >-
    Writes all data in the provided buffer to the specified file. Some implementatations may

    have an internal cache, which means <xref href="MonoTorrent.PieceWriter.IPieceWriter.FlushAsync(MonoTorrent.ITorrentManagerFile)" data-throw-if-not-resolved="false"></xref> should

    be invoked to guarantee the data is written to it's final destination.
  example: []
  syntax:
    content: public ReusableTask WriteAsync(ITorrentManagerFile file, long offset, ReadOnlyMemory<byte> buffer)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: ''
    - id: offset
      type: System.Int64
      description: ''
    - id: buffer
      type: System.ReadOnlyMemory{System.Byte}
      description: ''
    return:
      type: ReusableTasks.ReusableTask
      description: ''
    content.vb: Public Function WriteAsync(file As ITorrentManagerFile, offset As Long, buffer As ReadOnlyMemory(Of Byte)) As ReusableTask
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.WriteAsync*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  nameWithType.vb: BlockBasedPieceWriter.WriteAsync(ITorrentManagerFile, Long, ReadOnlyMemory(Of Byte))
  fullName.vb: MonoTorrent.PieceWriter.BlockBasedPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile, Long, System.ReadOnlyMemory(Of Byte))
  name.vb: WriteAsync(ITorrentManagerFile, Long, ReadOnlyMemory(Of Byte))
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.GetLengthAsync(MonoTorrent.ITorrentManagerFile)
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.GetLengthAsync(MonoTorrent.ITorrentManagerFile)
  id: GetLengthAsync(MonoTorrent.ITorrentManagerFile)
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: GetLengthAsync(ITorrentManagerFile)
  nameWithType: BlockBasedPieceWriter.GetLengthAsync(ITorrentManagerFile)
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.GetLengthAsync(MonoTorrent.ITorrentManagerFile)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: GetLengthAsync
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 50
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Returns null if the specified file does not exist, otherwise returns the length of the file in bytes.
  example: []
  syntax:
    content: public ReusableTask<long?> GetLengthAsync(ITorrentManagerFile file)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: ''
    return:
      type: ReusableTasks.ReusableTask{System.Nullable{System.Int64}}
      description: ''
    content.vb: Public Function GetLengthAsync(file As ITorrentManagerFile) As ReusableTask(Of Long?)
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.GetLengthAsync*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.GetLengthAsync(MonoTorrent.ITorrentManagerFile)
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile,System.Int64)
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile,System.Int64)
  id: SetLengthAsync(MonoTorrent.ITorrentManagerFile,System.Int64)
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: SetLengthAsync(ITorrentManagerFile, long)
  nameWithType: BlockBasedPieceWriter.SetLengthAsync(ITorrentManagerFile, long)
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile, long)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: SetLengthAsync
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 53
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: >-
    Returns false and no action is taken if the file does not already exist. If the file does exist

    it's length is set to the provided value.
  example: []
  syntax:
    content: public ReusableTask<bool> SetLengthAsync(ITorrentManagerFile file, long length)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: ''
    - id: length
      type: System.Int64
      description: ''
    return:
      type: ReusableTasks.ReusableTask{System.Boolean}
      description: ''
    content.vb: Public Function SetLengthAsync(file As ITorrentManagerFile, length As Long) As ReusableTask(Of Boolean)
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetLengthAsync*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile,System.Int64)
  nameWithType.vb: BlockBasedPieceWriter.SetLengthAsync(ITorrentManagerFile, Long)
  fullName.vb: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile, Long)
  name.vb: SetLengthAsync(ITorrentManagerFile, Long)
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.CreateAsync(MonoTorrent.ITorrentManagerFile,MonoTorrent.PieceWriter.FileCreationOptions)
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.CreateAsync(MonoTorrent.ITorrentManagerFile,MonoTorrent.PieceWriter.FileCreationOptions)
  id: CreateAsync(MonoTorrent.ITorrentManagerFile,MonoTorrent.PieceWriter.FileCreationOptions)
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: CreateAsync(ITorrentManagerFile, FileCreationOptions)
  nameWithType: BlockBasedPieceWriter.CreateAsync(ITorrentManagerFile, FileCreationOptions)
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.CreateAsync(MonoTorrent.ITorrentManagerFile, MonoTorrent.PieceWriter.FileCreationOptions)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CreateAsync
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 62
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Returns false if the file already exists, otherwise creates the file and returns true.
  example: []
  syntax:
    content: public ReusableTask<bool> CreateAsync(ITorrentManagerFile file, FileCreationOptions options)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: The file to create
    - id: options
      type: MonoTorrent.PieceWriter.FileCreationOptions
      description: Determines how new files will be created.
    return:
      type: ReusableTasks.ReusableTask{System.Boolean}
      description: ''
    content.vb: Public Function CreateAsync(file As ITorrentManagerFile, options As FileCreationOptions) As ReusableTask(Of Boolean)
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.CreateAsync*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.CreateAsync(MonoTorrent.ITorrentManagerFile,MonoTorrent.PieceWriter.FileCreationOptions)
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.ExistsAsync(MonoTorrent.ITorrentManagerFile)
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.ExistsAsync(MonoTorrent.ITorrentManagerFile)
  id: ExistsAsync(MonoTorrent.ITorrentManagerFile)
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: ExistsAsync(ITorrentManagerFile)
  nameWithType: BlockBasedPieceWriter.ExistsAsync(ITorrentManagerFile)
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.ExistsAsync(MonoTorrent.ITorrentManagerFile)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: ExistsAsync
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 65
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Returns true if the file exists.
  example: []
  syntax:
    content: public ReusableTask<bool> ExistsAsync(ITorrentManagerFile file)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: ''
    return:
      type: ReusableTasks.ReusableTask{System.Boolean}
      description: ''
    content.vb: Public Function ExistsAsync(file As ITorrentManagerFile) As ReusableTask(Of Boolean)
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.ExistsAsync*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.ExistsAsync(MonoTorrent.ITorrentManagerFile)
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.FlushAsync(MonoTorrent.ITorrentManagerFile)
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.FlushAsync(MonoTorrent.ITorrentManagerFile)
  id: FlushAsync(MonoTorrent.ITorrentManagerFile)
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: FlushAsync(ITorrentManagerFile)
  nameWithType: BlockBasedPieceWriter.FlushAsync(ITorrentManagerFile)
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.FlushAsync(MonoTorrent.ITorrentManagerFile)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: FlushAsync
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 68
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Flush any cached data to the file.
  example: []
  syntax:
    content: public ReusableTask FlushAsync(ITorrentManagerFile file)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: ''
    return:
      type: ReusableTasks.ReusableTask
      description: ''
    content.vb: Public Function FlushAsync(file As ITorrentManagerFile) As ReusableTask
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.FlushAsync*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.FlushAsync(MonoTorrent.ITorrentManagerFile)
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.OpenFiles
  commentId: P:MonoTorrent.PieceWriter.BlockBasedPieceWriter.OpenFiles
  id: OpenFiles
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: OpenFiles
  nameWithType: BlockBasedPieceWriter.OpenFiles
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.OpenFiles
  type: Property
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: OpenFiles
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 79
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  example: []
  syntax:
    content: public int OpenFiles { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property OpenFiles As Integer
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.OpenFiles*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.OpenFiles
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.MaximumOpenFiles
  commentId: P:MonoTorrent.PieceWriter.BlockBasedPieceWriter.MaximumOpenFiles
  id: MaximumOpenFiles
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: MaximumOpenFiles
  nameWithType: BlockBasedPieceWriter.MaximumOpenFiles
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.MaximumOpenFiles
  type: Property
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: MaximumOpenFiles
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 80
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  example: []
  syntax:
    content: public int MaximumOpenFiles { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MaximumOpenFiles As Integer
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.MaximumOpenFiles*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.MaximumOpenFiles
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.CloseAsync(MonoTorrent.ITorrentManagerFile)
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.CloseAsync(MonoTorrent.ITorrentManagerFile)
  id: CloseAsync(MonoTorrent.ITorrentManagerFile)
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: CloseAsync(ITorrentManagerFile)
  nameWithType: BlockBasedPieceWriter.CloseAsync(ITorrentManagerFile)
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.CloseAsync(MonoTorrent.ITorrentManagerFile)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CloseAsync
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 82
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Releases all resources associated with the specified file.
  example: []
  syntax:
    content: public ReusableTask CloseAsync(ITorrentManagerFile file)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: ''
    return:
      type: ReusableTasks.ReusableTask
      description: ''
    content.vb: Public Function CloseAsync(file As ITorrentManagerFile) As ReusableTask
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.CloseAsync*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.CloseAsync(MonoTorrent.ITorrentManagerFile)
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile,System.String,System.Boolean)
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile,System.String,System.Boolean)
  id: MoveAsync(MonoTorrent.ITorrentManagerFile,System.String,System.Boolean)
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: MoveAsync(ITorrentManagerFile, string, bool)
  nameWithType: BlockBasedPieceWriter.MoveAsync(ITorrentManagerFile, string, bool)
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile, string, bool)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: MoveAsync
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 85
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Moves the specified file to the new location. Optionally overwrite any pre-existing files.
  example: []
  syntax:
    content: public ReusableTask MoveAsync(ITorrentManagerFile file, string fullPath, bool overwrite)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: ''
    - id: fullPath
      type: System.String
      description: ''
    - id: overwrite
      type: System.Boolean
      description: ''
    return:
      type: ReusableTasks.ReusableTask
      description: ''
    content.vb: Public Function MoveAsync(file As ITorrentManagerFile, fullPath As String, overwrite As Boolean) As ReusableTask
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.MoveAsync*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile,System.String,System.Boolean)
  nameWithType.vb: BlockBasedPieceWriter.MoveAsync(ITorrentManagerFile, String, Boolean)
  fullName.vb: MonoTorrent.PieceWriter.BlockBasedPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile, String, Boolean)
  name.vb: MoveAsync(ITorrentManagerFile, String, Boolean)
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetMaximumOpenFilesAsync(System.Int32)
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetMaximumOpenFilesAsync(System.Int32)
  id: SetMaximumOpenFilesAsync(System.Int32)
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: SetMaximumOpenFilesAsync(int)
  nameWithType: BlockBasedPieceWriter.SetMaximumOpenFilesAsync(int)
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetMaximumOpenFilesAsync(int)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: SetMaximumOpenFilesAsync
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 88
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Optional limit to the maximum number of files this writer can have open concurrently.
  example: []
  syntax:
    content: public ReusableTask SetMaximumOpenFilesAsync(int maximumOpenFiles)
    parameters:
    - id: maximumOpenFiles
      type: System.Int32
      description: ''
    return:
      type: ReusableTasks.ReusableTask
      description: ''
    content.vb: Public Function SetMaximumOpenFilesAsync(maximumOpenFiles As Integer) As ReusableTask
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetMaximumOpenFilesAsync*
  implements:
  - MonoTorrent.PieceWriter.IPieceWriter.SetMaximumOpenFilesAsync(System.Int32)
  nameWithType.vb: BlockBasedPieceWriter.SetMaximumOpenFilesAsync(Integer)
  fullName.vb: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetMaximumOpenFilesAsync(Integer)
  name.vb: SetMaximumOpenFilesAsync(Integer)
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.Dispose
  commentId: M:MonoTorrent.PieceWriter.BlockBasedPieceWriter.Dispose
  id: Dispose
  parent: MonoTorrent.PieceWriter.BlockBasedPieceWriter
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: BlockBasedPieceWriter.Dispose()
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.Dispose()
  type: Method
  source:
    remote:
      path: MonoTorrent/src/PieceWriter/BlockBasedPieceWriter.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: Dispose
    path: src/PieceWriter/BlockBasedPieceWriter.cs
    startLine: 98
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.PieceWriter
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: MonoTorrent.PieceWriter.BlockBasedPieceWriter.Dispose*
  implements:
  - System.IDisposable.Dispose
references:
- uid: MonoTorrent.PieceWriter
  commentId: N:MonoTorrent.PieceWriter
  href: MonoTorrent.html
  name: MonoTorrent.PieceWriter
  nameWithType: MonoTorrent.PieceWriter
  fullName: MonoTorrent.PieceWriter
  spec.csharp:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.PieceWriter
    name: PieceWriter
    href: MonoTorrent.PieceWriter.html
  spec.vb:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.PieceWriter
    name: PieceWriter
    href: MonoTorrent.PieceWriter.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MonoTorrent.PieceWriter.IPieceWriter
  commentId: T:MonoTorrent.PieceWriter.IPieceWriter
  parent: MonoTorrent.PieceWriter
  href: MonoTorrent.PieceWriter.IPieceWriter.html
  name: IPieceWriter
  nameWithType: IPieceWriter
  fullName: MonoTorrent.PieceWriter.IPieceWriter
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: MonoTorrent.PieceWriter.IPieceWriter.MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  commentId: M:MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  parent: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions
  definition: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareReadAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_Memory_System_Byte__
  name: PaddingAwareReadAsync(IPieceWriter, ITorrentManagerFile, long, Memory<byte>)
  nameWithType: PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(IPieceWriter, ITorrentManagerFile, long, Memory<byte>)
  fullName: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter, MonoTorrent.ITorrentManagerFile, long, System.Memory<byte>)
  nameWithType.vb: PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(IPieceWriter, ITorrentManagerFile, Long, Memory(Of Byte))
  fullName.vb: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter, MonoTorrent.ITorrentManagerFile, Long, System.Memory(Of Byte))
  name.vb: PaddingAwareReadAsync(IPieceWriter, ITorrentManagerFile, Long, Memory(Of Byte))
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
    name: PaddingAwareReadAsync
    href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareReadAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_Memory_System_Byte__
  - name: (
  - uid: MonoTorrent.PieceWriter.IPieceWriter
    name: IPieceWriter
    href: MonoTorrent.PieceWriter.IPieceWriter.html
  - name: ','
  - name: " "
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
    name: PaddingAwareReadAsync
    href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareReadAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_Memory_System_Byte__
  - name: (
  - uid: MonoTorrent.PieceWriter.IPieceWriter
    name: IPieceWriter
    href: MonoTorrent.PieceWriter.IPieceWriter.html
  - name: ','
  - name: " "
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
  - name: )
- uid: MonoTorrent.PieceWriter.IPieceWriter.MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  commentId: M:MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  parent: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions
  definition: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareWriteAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_ReadOnlyMemory_System_Byte__
  name: PaddingAwareWriteAsync(IPieceWriter, ITorrentManagerFile, long, ReadOnlyMemory<byte>)
  nameWithType: PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(IPieceWriter, ITorrentManagerFile, long, ReadOnlyMemory<byte>)
  fullName: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter, MonoTorrent.ITorrentManagerFile, long, System.ReadOnlyMemory<byte>)
  nameWithType.vb: PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(IPieceWriter, ITorrentManagerFile, Long, ReadOnlyMemory(Of Byte))
  fullName.vb: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter, MonoTorrent.ITorrentManagerFile, Long, System.ReadOnlyMemory(Of Byte))
  name.vb: PaddingAwareWriteAsync(IPieceWriter, ITorrentManagerFile, Long, ReadOnlyMemory(Of Byte))
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
    name: PaddingAwareWriteAsync
    href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareWriteAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_ReadOnlyMemory_System_Byte__
  - name: (
  - uid: MonoTorrent.PieceWriter.IPieceWriter
    name: IPieceWriter
    href: MonoTorrent.PieceWriter.IPieceWriter.html
  - name: ','
  - name: " "
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
    name: PaddingAwareWriteAsync
    href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareWriteAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_ReadOnlyMemory_System_Byte__
  - name: (
  - uid: MonoTorrent.PieceWriter.IPieceWriter
    name: IPieceWriter
    href: MonoTorrent.PieceWriter.IPieceWriter.html
  - name: ','
  - name: " "
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  commentId: M:MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  isExternal: true
  href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareReadAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_Memory_System_Byte__
  name: PaddingAwareReadAsync(IPieceWriter, ITorrentManagerFile, long, Memory<byte>)
  nameWithType: PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(IPieceWriter, ITorrentManagerFile, long, Memory<byte>)
  fullName: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter, MonoTorrent.ITorrentManagerFile, long, System.Memory<byte>)
  nameWithType.vb: PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(IPieceWriter, ITorrentManagerFile, Long, Memory(Of Byte))
  fullName.vb: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter, MonoTorrent.ITorrentManagerFile, Long, System.Memory(Of Byte))
  name.vb: PaddingAwareReadAsync(IPieceWriter, ITorrentManagerFile, Long, Memory(Of Byte))
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
    name: PaddingAwareReadAsync
    href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareReadAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_Memory_System_Byte__
  - name: (
  - uid: MonoTorrent.PieceWriter.IPieceWriter
    name: IPieceWriter
    href: MonoTorrent.PieceWriter.IPieceWriter.html
  - name: ','
  - name: " "
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareReadAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
    name: PaddingAwareReadAsync
    href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareReadAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_Memory_System_Byte__
  - name: (
  - uid: MonoTorrent.PieceWriter.IPieceWriter
    name: IPieceWriter
    href: MonoTorrent.PieceWriter.IPieceWriter.html
  - name: ','
  - name: " "
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
  - name: )
- uid: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions
  commentId: T:MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions
  parent: MonoTorrent.PieceWriter
  href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html
  name: PaddingAwareIPieceWriterExtensions
  nameWithType: PaddingAwareIPieceWriterExtensions
  fullName: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions
- uid: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  commentId: M:MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  isExternal: true
  href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareWriteAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_ReadOnlyMemory_System_Byte__
  name: PaddingAwareWriteAsync(IPieceWriter, ITorrentManagerFile, long, ReadOnlyMemory<byte>)
  nameWithType: PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(IPieceWriter, ITorrentManagerFile, long, ReadOnlyMemory<byte>)
  fullName: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter, MonoTorrent.ITorrentManagerFile, long, System.ReadOnlyMemory<byte>)
  nameWithType.vb: PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(IPieceWriter, ITorrentManagerFile, Long, ReadOnlyMemory(Of Byte))
  fullName.vb: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter, MonoTorrent.ITorrentManagerFile, Long, System.ReadOnlyMemory(Of Byte))
  name.vb: PaddingAwareWriteAsync(IPieceWriter, ITorrentManagerFile, Long, ReadOnlyMemory(Of Byte))
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
    name: PaddingAwareWriteAsync
    href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareWriteAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_ReadOnlyMemory_System_Byte__
  - name: (
  - uid: MonoTorrent.PieceWriter.IPieceWriter
    name: IPieceWriter
    href: MonoTorrent.PieceWriter.IPieceWriter.html
  - name: ','
  - name: " "
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.PaddingAwareWriteAsync(MonoTorrent.PieceWriter.IPieceWriter,MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
    name: PaddingAwareWriteAsync
    href: MonoTorrent.PieceWriter.PaddingAwareIPieceWriterExtensions.html#MonoTorrent_PieceWriter_PaddingAwareIPieceWriterExtensions_PaddingAwareWriteAsync_MonoTorrent_PieceWriter_IPieceWriter_MonoTorrent_ITorrentManagerFile_System_Int64_System_ReadOnlyMemory_System_Byte__
  - name: (
  - uid: MonoTorrent.PieceWriter.IPieceWriter
    name: IPieceWriter
    href: MonoTorrent.PieceWriter.IPieceWriter.html
  - name: ','
  - name: " "
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
  - name: )
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.#ctor*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.#ctor
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter__ctor_MonoTorrent_BlockReader_IBlockReader_MonoTorrent_PieceWriter_IBlockWriter_System_Collections_Generic_IEnumerable_MonoTorrent_ITorrentManagerInfo__
  name: BlockBasedPieceWriter
  nameWithType: BlockBasedPieceWriter.BlockBasedPieceWriter
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.BlockBasedPieceWriter
  nameWithType.vb: BlockBasedPieceWriter.New
  fullName.vb: MonoTorrent.PieceWriter.BlockBasedPieceWriter.New
  name.vb: New
- uid: MonoTorrent.BlockReader.IBlockReader
  commentId: T:MonoTorrent.BlockReader.IBlockReader
  parent: MonoTorrent.BlockReader
  href: MonoTorrent.BlockReader.IBlockReader.html
  name: IBlockReader
  nameWithType: IBlockReader
  fullName: MonoTorrent.BlockReader.IBlockReader
- uid: MonoTorrent.PieceWriter.IBlockWriter
  commentId: T:MonoTorrent.PieceWriter.IBlockWriter
  parent: MonoTorrent.PieceWriter
  href: MonoTorrent.PieceWriter.IBlockWriter.html
  name: IBlockWriter
  nameWithType: IBlockWriter
  fullName: MonoTorrent.PieceWriter.IBlockWriter
- uid: System.Collections.Generic.IEnumerable{MonoTorrent.ITorrentManagerInfo}
  commentId: T:System.Collections.Generic.IEnumerable{MonoTorrent.ITorrentManagerInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<ITorrentManagerInfo>
  nameWithType: IEnumerable<ITorrentManagerInfo>
  fullName: System.Collections.Generic.IEnumerable<MonoTorrent.ITorrentManagerInfo>
  nameWithType.vb: IEnumerable(Of ITorrentManagerInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MonoTorrent.ITorrentManagerInfo)
  name.vb: IEnumerable(Of ITorrentManagerInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: MonoTorrent.ITorrentManagerInfo
    name: ITorrentManagerInfo
    href: MonoTorrent.ITorrentManagerInfo.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MonoTorrent.ITorrentManagerInfo
    name: ITorrentManagerInfo
    href: MonoTorrent.ITorrentManagerInfo.html
  - name: )
- uid: MonoTorrent.BlockReader
  commentId: N:MonoTorrent.BlockReader
  href: MonoTorrent.html
  name: MonoTorrent.BlockReader
  nameWithType: MonoTorrent.BlockReader
  fullName: MonoTorrent.BlockReader
  spec.csharp:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.BlockReader
    name: BlockReader
    href: MonoTorrent.BlockReader.html
  spec.vb:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.BlockReader
    name: BlockReader
    href: MonoTorrent.BlockReader.html
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.ReadAsync*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.ReadAsync
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_ReadAsync_MonoTorrent_ITorrentManagerFile_System_Int64_System_Memory_System_Byte__
  name: ReadAsync
  nameWithType: BlockBasedPieceWriter.ReadAsync
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.ReadAsync
- uid: MonoTorrent.PieceWriter.IPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  commentId: M:MonoTorrent.PieceWriter.IPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
  parent: MonoTorrent.PieceWriter.IPieceWriter
  isExternal: true
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_ReadAsync_MonoTorrent_ITorrentManagerFile_System_Int64_System_Memory_System_Byte__
  name: ReadAsync(ITorrentManagerFile, long, Memory<byte>)
  nameWithType: IPieceWriter.ReadAsync(ITorrentManagerFile, long, Memory<byte>)
  fullName: MonoTorrent.PieceWriter.IPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile, long, System.Memory<byte>)
  nameWithType.vb: IPieceWriter.ReadAsync(ITorrentManagerFile, Long, Memory(Of Byte))
  fullName.vb: MonoTorrent.PieceWriter.IPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile, Long, System.Memory(Of Byte))
  name.vb: ReadAsync(ITorrentManagerFile, Long, Memory(Of Byte))
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
    name: ReadAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_ReadAsync_MonoTorrent_ITorrentManagerFile_System_Int64_System_Memory_System_Byte__
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.ReadAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.Memory{System.Byte})
    name: ReadAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_ReadAsync_MonoTorrent_ITorrentManagerFile_System_Int64_System_Memory_System_Byte__
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
  - name: )
- uid: MonoTorrent.ITorrentManagerFile
  commentId: T:MonoTorrent.ITorrentManagerFile
  parent: MonoTorrent
  href: MonoTorrent.ITorrentManagerFile.html
  name: ITorrentManagerFile
  nameWithType: ITorrentManagerFile
  fullName: MonoTorrent.ITorrentManagerFile
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Memory{System.Byte}
  commentId: T:System.Memory{System.Byte}
  parent: System
  definition: System.Memory`1
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<byte>
  nameWithType: Memory<byte>
  fullName: System.Memory<byte>
  nameWithType.vb: Memory(Of Byte)
  fullName.vb: System.Memory(Of Byte)
  name.vb: Memory(Of Byte)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: ReusableTasks.ReusableTask{System.Int32}
  commentId: T:ReusableTasks.ReusableTask{System.Int32}
  parent: ReusableTasks
  definition: ReusableTasks.ReusableTask`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: ReusableTask<int>
  nameWithType: ReusableTask<int>
  fullName: ReusableTasks.ReusableTask<int>
  nameWithType.vb: ReusableTask(Of Integer)
  fullName.vb: ReusableTasks.ReusableTask(Of Integer)
  name.vb: ReusableTask(Of Integer)
  spec.csharp:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MonoTorrent
  commentId: N:MonoTorrent
  href: MonoTorrent.html
  name: MonoTorrent
  nameWithType: MonoTorrent
  fullName: MonoTorrent
- uid: System.Memory`1
  commentId: T:System.Memory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ReusableTasks.ReusableTask`1
  commentId: T:ReusableTasks.ReusableTask`1
  isExternal: true
  name: ReusableTask<T>
  nameWithType: ReusableTask<T>
  fullName: ReusableTasks.ReusableTask<T>
  nameWithType.vb: ReusableTask(Of T)
  fullName.vb: ReusableTasks.ReusableTask(Of T)
  name.vb: ReusableTask(Of T)
  spec.csharp:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ReusableTasks
  commentId: N:ReusableTasks
  isExternal: true
  name: ReusableTasks
  nameWithType: ReusableTasks
  fullName: ReusableTasks
- uid: MonoTorrent.PieceWriter.IPieceWriter.FlushAsync(MonoTorrent.ITorrentManagerFile)
  commentId: M:MonoTorrent.PieceWriter.IPieceWriter.FlushAsync(MonoTorrent.ITorrentManagerFile)
  parent: MonoTorrent.PieceWriter.IPieceWriter
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_FlushAsync_MonoTorrent_ITorrentManagerFile_
  name: FlushAsync(ITorrentManagerFile)
  nameWithType: IPieceWriter.FlushAsync(ITorrentManagerFile)
  fullName: MonoTorrent.PieceWriter.IPieceWriter.FlushAsync(MonoTorrent.ITorrentManagerFile)
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.FlushAsync(MonoTorrent.ITorrentManagerFile)
    name: FlushAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_FlushAsync_MonoTorrent_ITorrentManagerFile_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.FlushAsync(MonoTorrent.ITorrentManagerFile)
    name: FlushAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_FlushAsync_MonoTorrent_ITorrentManagerFile_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: )
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.WriteAsync*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.WriteAsync
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_WriteAsync_MonoTorrent_ITorrentManagerFile_System_Int64_System_ReadOnlyMemory_System_Byte__
  name: WriteAsync
  nameWithType: BlockBasedPieceWriter.WriteAsync
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.WriteAsync
- uid: MonoTorrent.PieceWriter.IPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  commentId: M:MonoTorrent.PieceWriter.IPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
  parent: MonoTorrent.PieceWriter.IPieceWriter
  isExternal: true
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_WriteAsync_MonoTorrent_ITorrentManagerFile_System_Int64_System_ReadOnlyMemory_System_Byte__
  name: WriteAsync(ITorrentManagerFile, long, ReadOnlyMemory<byte>)
  nameWithType: IPieceWriter.WriteAsync(ITorrentManagerFile, long, ReadOnlyMemory<byte>)
  fullName: MonoTorrent.PieceWriter.IPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile, long, System.ReadOnlyMemory<byte>)
  nameWithType.vb: IPieceWriter.WriteAsync(ITorrentManagerFile, Long, ReadOnlyMemory(Of Byte))
  fullName.vb: MonoTorrent.PieceWriter.IPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile, Long, System.ReadOnlyMemory(Of Byte))
  name.vb: WriteAsync(ITorrentManagerFile, Long, ReadOnlyMemory(Of Byte))
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
    name: WriteAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_WriteAsync_MonoTorrent_ITorrentManagerFile_System_Int64_System_ReadOnlyMemory_System_Byte__
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.WriteAsync(MonoTorrent.ITorrentManagerFile,System.Int64,System.ReadOnlyMemory{System.Byte})
    name: WriteAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_WriteAsync_MonoTorrent_ITorrentManagerFile_System_Int64_System_ReadOnlyMemory_System_Byte__
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
  - name: )
- uid: System.ReadOnlyMemory{System.Byte}
  commentId: T:System.ReadOnlyMemory{System.Byte}
  parent: System
  definition: System.ReadOnlyMemory`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<byte>
  nameWithType: ReadOnlyMemory<byte>
  fullName: System.ReadOnlyMemory<byte>
  nameWithType.vb: ReadOnlyMemory(Of Byte)
  fullName.vb: System.ReadOnlyMemory(Of Byte)
  name.vb: ReadOnlyMemory(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: ReusableTasks.ReusableTask
  commentId: T:ReusableTasks.ReusableTask
  parent: ReusableTasks
  isExternal: true
  name: ReusableTask
  nameWithType: ReusableTask
  fullName: ReusableTasks.ReusableTask
- uid: System.ReadOnlyMemory`1
  commentId: T:System.ReadOnlyMemory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<T>
  nameWithType: ReadOnlyMemory<T>
  fullName: System.ReadOnlyMemory<T>
  nameWithType.vb: ReadOnlyMemory(Of T)
  fullName.vb: System.ReadOnlyMemory(Of T)
  name.vb: ReadOnlyMemory(Of T)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.GetLengthAsync*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.GetLengthAsync
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_GetLengthAsync_MonoTorrent_ITorrentManagerFile_
  name: GetLengthAsync
  nameWithType: BlockBasedPieceWriter.GetLengthAsync
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.GetLengthAsync
- uid: MonoTorrent.PieceWriter.IPieceWriter.GetLengthAsync(MonoTorrent.ITorrentManagerFile)
  commentId: M:MonoTorrent.PieceWriter.IPieceWriter.GetLengthAsync(MonoTorrent.ITorrentManagerFile)
  parent: MonoTorrent.PieceWriter.IPieceWriter
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_GetLengthAsync_MonoTorrent_ITorrentManagerFile_
  name: GetLengthAsync(ITorrentManagerFile)
  nameWithType: IPieceWriter.GetLengthAsync(ITorrentManagerFile)
  fullName: MonoTorrent.PieceWriter.IPieceWriter.GetLengthAsync(MonoTorrent.ITorrentManagerFile)
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.GetLengthAsync(MonoTorrent.ITorrentManagerFile)
    name: GetLengthAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_GetLengthAsync_MonoTorrent_ITorrentManagerFile_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.GetLengthAsync(MonoTorrent.ITorrentManagerFile)
    name: GetLengthAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_GetLengthAsync_MonoTorrent_ITorrentManagerFile_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: )
- uid: ReusableTasks.ReusableTask{System.Nullable{System.Int64}}
  commentId: T:ReusableTasks.ReusableTask{System.Nullable{System.Int64}}
  parent: ReusableTasks
  definition: ReusableTasks.ReusableTask`1
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: ReusableTask<long?>
  nameWithType: ReusableTask<long?>
  fullName: ReusableTasks.ReusableTask<long?>
  nameWithType.vb: ReusableTask(Of Long?)
  fullName.vb: ReusableTasks.ReusableTask(Of Long?)
  name.vb: ReusableTask(Of Long?)
  spec.csharp:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '?'
  - name: )
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetLengthAsync*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetLengthAsync
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_SetLengthAsync_MonoTorrent_ITorrentManagerFile_System_Int64_
  name: SetLengthAsync
  nameWithType: BlockBasedPieceWriter.SetLengthAsync
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetLengthAsync
- uid: MonoTorrent.PieceWriter.IPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile,System.Int64)
  commentId: M:MonoTorrent.PieceWriter.IPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile,System.Int64)
  parent: MonoTorrent.PieceWriter.IPieceWriter
  isExternal: true
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_SetLengthAsync_MonoTorrent_ITorrentManagerFile_System_Int64_
  name: SetLengthAsync(ITorrentManagerFile, long)
  nameWithType: IPieceWriter.SetLengthAsync(ITorrentManagerFile, long)
  fullName: MonoTorrent.PieceWriter.IPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile, long)
  nameWithType.vb: IPieceWriter.SetLengthAsync(ITorrentManagerFile, Long)
  fullName.vb: MonoTorrent.PieceWriter.IPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile, Long)
  name.vb: SetLengthAsync(ITorrentManagerFile, Long)
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile,System.Int64)
    name: SetLengthAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_SetLengthAsync_MonoTorrent_ITorrentManagerFile_System_Int64_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.SetLengthAsync(MonoTorrent.ITorrentManagerFile,System.Int64)
    name: SetLengthAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_SetLengthAsync_MonoTorrent_ITorrentManagerFile_System_Int64_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: ReusableTasks.ReusableTask{System.Boolean}
  commentId: T:ReusableTasks.ReusableTask{System.Boolean}
  parent: ReusableTasks
  definition: ReusableTasks.ReusableTask`1
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: ReusableTask<bool>
  nameWithType: ReusableTask<bool>
  fullName: ReusableTasks.ReusableTask<bool>
  nameWithType.vb: ReusableTask(Of Boolean)
  fullName.vb: ReusableTasks.ReusableTask(Of Boolean)
  name.vb: ReusableTask(Of Boolean)
  spec.csharp:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.CreateAsync*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.CreateAsync
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_CreateAsync_MonoTorrent_ITorrentManagerFile_MonoTorrent_PieceWriter_FileCreationOptions_
  name: CreateAsync
  nameWithType: BlockBasedPieceWriter.CreateAsync
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.CreateAsync
- uid: MonoTorrent.PieceWriter.IPieceWriter.CreateAsync(MonoTorrent.ITorrentManagerFile,MonoTorrent.PieceWriter.FileCreationOptions)
  commentId: M:MonoTorrent.PieceWriter.IPieceWriter.CreateAsync(MonoTorrent.ITorrentManagerFile,MonoTorrent.PieceWriter.FileCreationOptions)
  parent: MonoTorrent.PieceWriter.IPieceWriter
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_CreateAsync_MonoTorrent_ITorrentManagerFile_MonoTorrent_PieceWriter_FileCreationOptions_
  name: CreateAsync(ITorrentManagerFile, FileCreationOptions)
  nameWithType: IPieceWriter.CreateAsync(ITorrentManagerFile, FileCreationOptions)
  fullName: MonoTorrent.PieceWriter.IPieceWriter.CreateAsync(MonoTorrent.ITorrentManagerFile, MonoTorrent.PieceWriter.FileCreationOptions)
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.CreateAsync(MonoTorrent.ITorrentManagerFile,MonoTorrent.PieceWriter.FileCreationOptions)
    name: CreateAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_CreateAsync_MonoTorrent_ITorrentManagerFile_MonoTorrent_PieceWriter_FileCreationOptions_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: MonoTorrent.PieceWriter.FileCreationOptions
    name: FileCreationOptions
    href: MonoTorrent.PieceWriter.FileCreationOptions.html
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.CreateAsync(MonoTorrent.ITorrentManagerFile,MonoTorrent.PieceWriter.FileCreationOptions)
    name: CreateAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_CreateAsync_MonoTorrent_ITorrentManagerFile_MonoTorrent_PieceWriter_FileCreationOptions_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: MonoTorrent.PieceWriter.FileCreationOptions
    name: FileCreationOptions
    href: MonoTorrent.PieceWriter.FileCreationOptions.html
  - name: )
- uid: MonoTorrent.PieceWriter.FileCreationOptions
  commentId: T:MonoTorrent.PieceWriter.FileCreationOptions
  parent: MonoTorrent.PieceWriter
  href: MonoTorrent.PieceWriter.FileCreationOptions.html
  name: FileCreationOptions
  nameWithType: FileCreationOptions
  fullName: MonoTorrent.PieceWriter.FileCreationOptions
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.ExistsAsync*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.ExistsAsync
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_ExistsAsync_MonoTorrent_ITorrentManagerFile_
  name: ExistsAsync
  nameWithType: BlockBasedPieceWriter.ExistsAsync
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.ExistsAsync
- uid: MonoTorrent.PieceWriter.IPieceWriter.ExistsAsync(MonoTorrent.ITorrentManagerFile)
  commentId: M:MonoTorrent.PieceWriter.IPieceWriter.ExistsAsync(MonoTorrent.ITorrentManagerFile)
  parent: MonoTorrent.PieceWriter.IPieceWriter
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_ExistsAsync_MonoTorrent_ITorrentManagerFile_
  name: ExistsAsync(ITorrentManagerFile)
  nameWithType: IPieceWriter.ExistsAsync(ITorrentManagerFile)
  fullName: MonoTorrent.PieceWriter.IPieceWriter.ExistsAsync(MonoTorrent.ITorrentManagerFile)
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.ExistsAsync(MonoTorrent.ITorrentManagerFile)
    name: ExistsAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_ExistsAsync_MonoTorrent_ITorrentManagerFile_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.ExistsAsync(MonoTorrent.ITorrentManagerFile)
    name: ExistsAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_ExistsAsync_MonoTorrent_ITorrentManagerFile_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: )
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.FlushAsync*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.FlushAsync
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_FlushAsync_MonoTorrent_ITorrentManagerFile_
  name: FlushAsync
  nameWithType: BlockBasedPieceWriter.FlushAsync
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.FlushAsync
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.OpenFiles*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.OpenFiles
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_OpenFiles
  name: OpenFiles
  nameWithType: BlockBasedPieceWriter.OpenFiles
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.OpenFiles
- uid: MonoTorrent.PieceWriter.IPieceWriter.OpenFiles
  commentId: P:MonoTorrent.PieceWriter.IPieceWriter.OpenFiles
  parent: MonoTorrent.PieceWriter.IPieceWriter
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_OpenFiles
  name: OpenFiles
  nameWithType: IPieceWriter.OpenFiles
  fullName: MonoTorrent.PieceWriter.IPieceWriter.OpenFiles
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.MaximumOpenFiles*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.MaximumOpenFiles
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_MaximumOpenFiles
  name: MaximumOpenFiles
  nameWithType: BlockBasedPieceWriter.MaximumOpenFiles
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.MaximumOpenFiles
- uid: MonoTorrent.PieceWriter.IPieceWriter.MaximumOpenFiles
  commentId: P:MonoTorrent.PieceWriter.IPieceWriter.MaximumOpenFiles
  parent: MonoTorrent.PieceWriter.IPieceWriter
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_MaximumOpenFiles
  name: MaximumOpenFiles
  nameWithType: IPieceWriter.MaximumOpenFiles
  fullName: MonoTorrent.PieceWriter.IPieceWriter.MaximumOpenFiles
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.CloseAsync*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.CloseAsync
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_CloseAsync_MonoTorrent_ITorrentManagerFile_
  name: CloseAsync
  nameWithType: BlockBasedPieceWriter.CloseAsync
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.CloseAsync
- uid: MonoTorrent.PieceWriter.IPieceWriter.CloseAsync(MonoTorrent.ITorrentManagerFile)
  commentId: M:MonoTorrent.PieceWriter.IPieceWriter.CloseAsync(MonoTorrent.ITorrentManagerFile)
  parent: MonoTorrent.PieceWriter.IPieceWriter
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_CloseAsync_MonoTorrent_ITorrentManagerFile_
  name: CloseAsync(ITorrentManagerFile)
  nameWithType: IPieceWriter.CloseAsync(ITorrentManagerFile)
  fullName: MonoTorrent.PieceWriter.IPieceWriter.CloseAsync(MonoTorrent.ITorrentManagerFile)
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.CloseAsync(MonoTorrent.ITorrentManagerFile)
    name: CloseAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_CloseAsync_MonoTorrent_ITorrentManagerFile_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.CloseAsync(MonoTorrent.ITorrentManagerFile)
    name: CloseAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_CloseAsync_MonoTorrent_ITorrentManagerFile_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: )
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.MoveAsync*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.MoveAsync
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_MoveAsync_MonoTorrent_ITorrentManagerFile_System_String_System_Boolean_
  name: MoveAsync
  nameWithType: BlockBasedPieceWriter.MoveAsync
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.MoveAsync
- uid: MonoTorrent.PieceWriter.IPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile,System.String,System.Boolean)
  commentId: M:MonoTorrent.PieceWriter.IPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile,System.String,System.Boolean)
  parent: MonoTorrent.PieceWriter.IPieceWriter
  isExternal: true
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_MoveAsync_MonoTorrent_ITorrentManagerFile_System_String_System_Boolean_
  name: MoveAsync(ITorrentManagerFile, string, bool)
  nameWithType: IPieceWriter.MoveAsync(ITorrentManagerFile, string, bool)
  fullName: MonoTorrent.PieceWriter.IPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile, string, bool)
  nameWithType.vb: IPieceWriter.MoveAsync(ITorrentManagerFile, String, Boolean)
  fullName.vb: MonoTorrent.PieceWriter.IPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile, String, Boolean)
  name.vb: MoveAsync(ITorrentManagerFile, String, Boolean)
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile,System.String,System.Boolean)
    name: MoveAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_MoveAsync_MonoTorrent_ITorrentManagerFile_System_String_System_Boolean_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.MoveAsync(MonoTorrent.ITorrentManagerFile,System.String,System.Boolean)
    name: MoveAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_MoveAsync_MonoTorrent_ITorrentManagerFile_System_String_System_Boolean_
  - name: (
  - uid: MonoTorrent.ITorrentManagerFile
    name: ITorrentManagerFile
    href: MonoTorrent.ITorrentManagerFile.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetMaximumOpenFilesAsync*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetMaximumOpenFilesAsync
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_SetMaximumOpenFilesAsync_System_Int32_
  name: SetMaximumOpenFilesAsync
  nameWithType: BlockBasedPieceWriter.SetMaximumOpenFilesAsync
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.SetMaximumOpenFilesAsync
- uid: MonoTorrent.PieceWriter.IPieceWriter.SetMaximumOpenFilesAsync(System.Int32)
  commentId: M:MonoTorrent.PieceWriter.IPieceWriter.SetMaximumOpenFilesAsync(System.Int32)
  parent: MonoTorrent.PieceWriter.IPieceWriter
  isExternal: true
  href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_SetMaximumOpenFilesAsync_System_Int32_
  name: SetMaximumOpenFilesAsync(int)
  nameWithType: IPieceWriter.SetMaximumOpenFilesAsync(int)
  fullName: MonoTorrent.PieceWriter.IPieceWriter.SetMaximumOpenFilesAsync(int)
  nameWithType.vb: IPieceWriter.SetMaximumOpenFilesAsync(Integer)
  fullName.vb: MonoTorrent.PieceWriter.IPieceWriter.SetMaximumOpenFilesAsync(Integer)
  name.vb: SetMaximumOpenFilesAsync(Integer)
  spec.csharp:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.SetMaximumOpenFilesAsync(System.Int32)
    name: SetMaximumOpenFilesAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_SetMaximumOpenFilesAsync_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MonoTorrent.PieceWriter.IPieceWriter.SetMaximumOpenFilesAsync(System.Int32)
    name: SetMaximumOpenFilesAsync
    href: MonoTorrent.PieceWriter.IPieceWriter.html#MonoTorrent_PieceWriter_IPieceWriter_SetMaximumOpenFilesAsync_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MonoTorrent.PieceWriter.BlockBasedPieceWriter.Dispose*
  commentId: Overload:MonoTorrent.PieceWriter.BlockBasedPieceWriter.Dispose
  href: MonoTorrent.PieceWriter.BlockBasedPieceWriter.html#MonoTorrent_PieceWriter_BlockBasedPieceWriter_Dispose
  name: Dispose
  nameWithType: BlockBasedPieceWriter.Dispose
  fullName: MonoTorrent.PieceWriter.BlockBasedPieceWriter.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
