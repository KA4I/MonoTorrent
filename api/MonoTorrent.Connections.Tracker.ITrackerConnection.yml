### YamlMime:ManagedReference
items:
- uid: MonoTorrent.Connections.Tracker.ITrackerConnection
  commentId: T:MonoTorrent.Connections.Tracker.ITrackerConnection
  id: ITrackerConnection
  parent: MonoTorrent.Connections.Tracker
  children:
  - MonoTorrent.Connections.Tracker.ITrackerConnection.AnnounceAsync(MonoTorrent.Trackers.AnnounceRequest,System.Threading.CancellationToken)
  - MonoTorrent.Connections.Tracker.ITrackerConnection.CanScrape
  - MonoTorrent.Connections.Tracker.ITrackerConnection.ScrapeAsync(MonoTorrent.Trackers.ScrapeRequest,System.Threading.CancellationToken)
  - MonoTorrent.Connections.Tracker.ITrackerConnection.Uri
  langs:
  - csharp
  - vb
  name: ITrackerConnection
  nameWithType: ITrackerConnection
  fullName: MonoTorrent.Connections.Tracker.ITrackerConnection
  type: Interface
  source:
    remote:
      path: MonoTorrent/src/Connections/Tracker/ITrackerConnection.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: ITrackerConnection
    path: src/Connections/Tracker/ITrackerConnection.cs
    startLine: 38
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Connections.Tracker
  syntax:
    content: public interface ITrackerConnection
    content.vb: Public Interface ITrackerConnection
- uid: MonoTorrent.Connections.Tracker.ITrackerConnection.CanScrape
  commentId: P:MonoTorrent.Connections.Tracker.ITrackerConnection.CanScrape
  id: CanScrape
  parent: MonoTorrent.Connections.Tracker.ITrackerConnection
  langs:
  - csharp
  - vb
  name: CanScrape
  nameWithType: ITrackerConnection.CanScrape
  fullName: MonoTorrent.Connections.Tracker.ITrackerConnection.CanScrape
  type: Property
  source:
    remote:
      path: MonoTorrent/src/Connections/Tracker/ITrackerConnection.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CanScrape
    path: src/Connections/Tracker/ITrackerConnection.cs
    startLine: 43
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Connections.Tracker
  summary: True if the tracker supports Scrape requests.
  example: []
  syntax:
    content: bool CanScrape { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanScrape As Boolean
  overload: MonoTorrent.Connections.Tracker.ITrackerConnection.CanScrape*
- uid: MonoTorrent.Connections.Tracker.ITrackerConnection.Uri
  commentId: P:MonoTorrent.Connections.Tracker.ITrackerConnection.Uri
  id: Uri
  parent: MonoTorrent.Connections.Tracker.ITrackerConnection
  langs:
  - csharp
  - vb
  name: Uri
  nameWithType: ITrackerConnection.Uri
  fullName: MonoTorrent.Connections.Tracker.ITrackerConnection.Uri
  type: Property
  source:
    remote:
      path: MonoTorrent/src/Connections/Tracker/ITrackerConnection.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: Uri
    path: src/Connections/Tracker/ITrackerConnection.cs
    startLine: 48
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Connections.Tracker
  summary: The uri for the tracker
  example: []
  syntax:
    content: Uri Uri { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: ReadOnly Property Uri As Uri
  overload: MonoTorrent.Connections.Tracker.ITrackerConnection.Uri*
- uid: MonoTorrent.Connections.Tracker.ITrackerConnection.AnnounceAsync(MonoTorrent.Trackers.AnnounceRequest,System.Threading.CancellationToken)
  commentId: M:MonoTorrent.Connections.Tracker.ITrackerConnection.AnnounceAsync(MonoTorrent.Trackers.AnnounceRequest,System.Threading.CancellationToken)
  id: AnnounceAsync(MonoTorrent.Trackers.AnnounceRequest,System.Threading.CancellationToken)
  parent: MonoTorrent.Connections.Tracker.ITrackerConnection
  langs:
  - csharp
  - vb
  name: AnnounceAsync(AnnounceRequest, CancellationToken)
  nameWithType: ITrackerConnection.AnnounceAsync(AnnounceRequest, CancellationToken)
  fullName: MonoTorrent.Connections.Tracker.ITrackerConnection.AnnounceAsync(MonoTorrent.Trackers.AnnounceRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/Connections/Tracker/ITrackerConnection.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: AnnounceAsync
    path: src/Connections/Tracker/ITrackerConnection.cs
    startLine: 56
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Connections.Tracker
  summary: Send an announce request to the tracker.
  example: []
  syntax:
    content: ReusableTask<AnnounceResponse> AnnounceAsync(AnnounceRequest requestParameters, CancellationToken token)
    parameters:
    - id: requestParameters
      type: MonoTorrent.Trackers.AnnounceRequest
      description: ''
    - id: token
      type: System.Threading.CancellationToken
      description: The token used to cancel the request.
    return:
      type: ReusableTasks.ReusableTask{MonoTorrent.Trackers.AnnounceResponse}
      description: ''
    content.vb: Function AnnounceAsync(requestParameters As AnnounceRequest, token As CancellationToken) As ReusableTask(Of AnnounceResponse)
  overload: MonoTorrent.Connections.Tracker.ITrackerConnection.AnnounceAsync*
- uid: MonoTorrent.Connections.Tracker.ITrackerConnection.ScrapeAsync(MonoTorrent.Trackers.ScrapeRequest,System.Threading.CancellationToken)
  commentId: M:MonoTorrent.Connections.Tracker.ITrackerConnection.ScrapeAsync(MonoTorrent.Trackers.ScrapeRequest,System.Threading.CancellationToken)
  id: ScrapeAsync(MonoTorrent.Trackers.ScrapeRequest,System.Threading.CancellationToken)
  parent: MonoTorrent.Connections.Tracker.ITrackerConnection
  langs:
  - csharp
  - vb
  name: ScrapeAsync(ScrapeRequest, CancellationToken)
  nameWithType: ITrackerConnection.ScrapeAsync(ScrapeRequest, CancellationToken)
  fullName: MonoTorrent.Connections.Tracker.ITrackerConnection.ScrapeAsync(MonoTorrent.Trackers.ScrapeRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/Connections/Tracker/ITrackerConnection.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: ScrapeAsync
    path: src/Connections/Tracker/ITrackerConnection.cs
    startLine: 64
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Connections.Tracker
  summary: Send a scrape request to the tracker.
  example: []
  syntax:
    content: ReusableTask<ScrapeResponse> ScrapeAsync(ScrapeRequest requestParameters, CancellationToken token)
    parameters:
    - id: requestParameters
      type: MonoTorrent.Trackers.ScrapeRequest
      description: ''
    - id: token
      type: System.Threading.CancellationToken
      description: The token used to cancel the request.
    return:
      type: ReusableTasks.ReusableTask{MonoTorrent.Trackers.ScrapeResponse}
      description: ''
    content.vb: Function ScrapeAsync(requestParameters As ScrapeRequest, token As CancellationToken) As ReusableTask(Of ScrapeResponse)
  overload: MonoTorrent.Connections.Tracker.ITrackerConnection.ScrapeAsync*
references:
- uid: MonoTorrent.Connections.Tracker
  commentId: N:MonoTorrent.Connections.Tracker
  href: MonoTorrent.html
  name: MonoTorrent.Connections.Tracker
  nameWithType: MonoTorrent.Connections.Tracker
  fullName: MonoTorrent.Connections.Tracker
  spec.csharp:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.Connections
    name: Connections
    href: MonoTorrent.Connections.html
  - name: .
  - uid: MonoTorrent.Connections.Tracker
    name: Tracker
    href: MonoTorrent.Connections.Tracker.html
  spec.vb:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.Connections
    name: Connections
    href: MonoTorrent.Connections.html
  - name: .
  - uid: MonoTorrent.Connections.Tracker
    name: Tracker
    href: MonoTorrent.Connections.Tracker.html
- uid: MonoTorrent.Connections.Tracker.ITrackerConnection.CanScrape*
  commentId: Overload:MonoTorrent.Connections.Tracker.ITrackerConnection.CanScrape
  href: MonoTorrent.Connections.Tracker.ITrackerConnection.html#MonoTorrent_Connections_Tracker_ITrackerConnection_CanScrape
  name: CanScrape
  nameWithType: ITrackerConnection.CanScrape
  fullName: MonoTorrent.Connections.Tracker.ITrackerConnection.CanScrape
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MonoTorrent.Connections.Tracker.ITrackerConnection.Uri*
  commentId: Overload:MonoTorrent.Connections.Tracker.ITrackerConnection.Uri
  href: MonoTorrent.Connections.Tracker.ITrackerConnection.html#MonoTorrent_Connections_Tracker_ITrackerConnection_Uri
  name: Uri
  nameWithType: ITrackerConnection.Uri
  fullName: MonoTorrent.Connections.Tracker.ITrackerConnection.Uri
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uri
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: MonoTorrent.Connections.Tracker.ITrackerConnection.AnnounceAsync*
  commentId: Overload:MonoTorrent.Connections.Tracker.ITrackerConnection.AnnounceAsync
  href: MonoTorrent.Connections.Tracker.ITrackerConnection.html#MonoTorrent_Connections_Tracker_ITrackerConnection_AnnounceAsync_MonoTorrent_Trackers_AnnounceRequest_System_Threading_CancellationToken_
  name: AnnounceAsync
  nameWithType: ITrackerConnection.AnnounceAsync
  fullName: MonoTorrent.Connections.Tracker.ITrackerConnection.AnnounceAsync
- uid: MonoTorrent.Trackers.AnnounceRequest
  commentId: T:MonoTorrent.Trackers.AnnounceRequest
  parent: MonoTorrent.Trackers
  href: MonoTorrent.Trackers.AnnounceRequest.html
  name: AnnounceRequest
  nameWithType: AnnounceRequest
  fullName: MonoTorrent.Trackers.AnnounceRequest
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: ReusableTasks.ReusableTask{MonoTorrent.Trackers.AnnounceResponse}
  commentId: T:ReusableTasks.ReusableTask{MonoTorrent.Trackers.AnnounceResponse}
  parent: ReusableTasks
  definition: ReusableTasks.ReusableTask`1
  href: MonoTorrent.Trackers.AnnounceResponse.html
  name: ReusableTask<AnnounceResponse>
  nameWithType: ReusableTask<AnnounceResponse>
  fullName: ReusableTasks.ReusableTask<MonoTorrent.Trackers.AnnounceResponse>
  nameWithType.vb: ReusableTask(Of AnnounceResponse)
  fullName.vb: ReusableTasks.ReusableTask(Of MonoTorrent.Trackers.AnnounceResponse)
  name.vb: ReusableTask(Of AnnounceResponse)
  spec.csharp:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: <
  - uid: MonoTorrent.Trackers.AnnounceResponse
    name: AnnounceResponse
    href: MonoTorrent.Trackers.AnnounceResponse.html
  - name: '>'
  spec.vb:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: MonoTorrent.Trackers.AnnounceResponse
    name: AnnounceResponse
    href: MonoTorrent.Trackers.AnnounceResponse.html
  - name: )
- uid: MonoTorrent.Trackers
  commentId: N:MonoTorrent.Trackers
  href: MonoTorrent.html
  name: MonoTorrent.Trackers
  nameWithType: MonoTorrent.Trackers
  fullName: MonoTorrent.Trackers
  spec.csharp:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.Trackers
    name: Trackers
    href: MonoTorrent.Trackers.html
  spec.vb:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.Trackers
    name: Trackers
    href: MonoTorrent.Trackers.html
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: ReusableTasks.ReusableTask`1
  commentId: T:ReusableTasks.ReusableTask`1
  isExternal: true
  name: ReusableTask<T>
  nameWithType: ReusableTask<T>
  fullName: ReusableTasks.ReusableTask<T>
  nameWithType.vb: ReusableTask(Of T)
  fullName.vb: ReusableTasks.ReusableTask(Of T)
  name.vb: ReusableTask(Of T)
  spec.csharp:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ReusableTasks
  commentId: N:ReusableTasks
  isExternal: true
  name: ReusableTasks
  nameWithType: ReusableTasks
  fullName: ReusableTasks
- uid: MonoTorrent.Connections.Tracker.ITrackerConnection.ScrapeAsync*
  commentId: Overload:MonoTorrent.Connections.Tracker.ITrackerConnection.ScrapeAsync
  href: MonoTorrent.Connections.Tracker.ITrackerConnection.html#MonoTorrent_Connections_Tracker_ITrackerConnection_ScrapeAsync_MonoTorrent_Trackers_ScrapeRequest_System_Threading_CancellationToken_
  name: ScrapeAsync
  nameWithType: ITrackerConnection.ScrapeAsync
  fullName: MonoTorrent.Connections.Tracker.ITrackerConnection.ScrapeAsync
- uid: MonoTorrent.Trackers.ScrapeRequest
  commentId: T:MonoTorrent.Trackers.ScrapeRequest
  parent: MonoTorrent.Trackers
  href: MonoTorrent.Trackers.ScrapeRequest.html
  name: ScrapeRequest
  nameWithType: ScrapeRequest
  fullName: MonoTorrent.Trackers.ScrapeRequest
- uid: ReusableTasks.ReusableTask{MonoTorrent.Trackers.ScrapeResponse}
  commentId: T:ReusableTasks.ReusableTask{MonoTorrent.Trackers.ScrapeResponse}
  parent: ReusableTasks
  definition: ReusableTasks.ReusableTask`1
  href: MonoTorrent.Trackers.ScrapeResponse.html
  name: ReusableTask<ScrapeResponse>
  nameWithType: ReusableTask<ScrapeResponse>
  fullName: ReusableTasks.ReusableTask<MonoTorrent.Trackers.ScrapeResponse>
  nameWithType.vb: ReusableTask(Of ScrapeResponse)
  fullName.vb: ReusableTasks.ReusableTask(Of MonoTorrent.Trackers.ScrapeResponse)
  name.vb: ReusableTask(Of ScrapeResponse)
  spec.csharp:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: <
  - uid: MonoTorrent.Trackers.ScrapeResponse
    name: ScrapeResponse
    href: MonoTorrent.Trackers.ScrapeResponse.html
  - name: '>'
  spec.vb:
  - uid: ReusableTasks.ReusableTask`1
    name: ReusableTask
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: MonoTorrent.Trackers.ScrapeResponse
    name: ScrapeResponse
    href: MonoTorrent.Trackers.ScrapeResponse.html
  - name: )
