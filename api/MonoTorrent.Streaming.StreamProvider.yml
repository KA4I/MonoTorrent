### YamlMime:ManagedReference
items:
- uid: MonoTorrent.Streaming.StreamProvider
  commentId: T:MonoTorrent.Streaming.StreamProvider
  id: StreamProvider
  parent: MonoTorrent.Streaming
  children:
  - MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile)
  - MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean)
  - MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean,System.Threading.CancellationToken)
  - MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Threading.CancellationToken)
  - MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile)
  - MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean)
  - MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean,System.Threading.CancellationToken)
  - MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: StreamProvider
  nameWithType: StreamProvider
  fullName: MonoTorrent.Streaming.StreamProvider
  type: Class
  source:
    remote:
      path: MonoTorrent/src/Streaming/StreamProvider.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: StreamProvider
    path: src/Streaming/StreamProvider.cs
    startLine: 42
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Streaming
  summary: Prepare the TorrentManager so individual files can be accessed while they are downloading.
  example: []
  syntax:
    content: public class StreamProvider
    content.vb: Public Class StreamProvider
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile)
  commentId: M:MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile)
  id: CreateStreamAsync(MonoTorrent.ITorrentManagerFile)
  parent: MonoTorrent.Streaming.StreamProvider
  langs:
  - csharp
  - vb
  name: CreateStreamAsync(ITorrentManagerFile)
  nameWithType: StreamProvider.CreateStreamAsync(ITorrentManagerFile)
  fullName: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/Streaming/StreamProvider.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CreateStreamAsync
    path: src/Streaming/StreamProvider.cs
    startLine: 64
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Streaming
  summary: >-
    Creates a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> which can be used to access the given <xref href="MonoTorrent.TorrentFile" data-throw-if-not-resolved="false"></xref>

    while it is downloading. This stream is seekable and readable. The first and last pieces of

    this file will be buffered before the stream is created. Finally, this stream must be disposed

    before another stream can be created.
  example: []
  syntax:
    content: public Task<Stream> CreateStreamAsync(ITorrentManagerFile file)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: The file to open
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: ''
    content.vb: Public Function CreateStreamAsync(file As ITorrentManagerFile) As Task(Of Stream)
  overload: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync*
- uid: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Threading.CancellationToken)
  commentId: M:MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Threading.CancellationToken)
  id: CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Threading.CancellationToken)
  parent: MonoTorrent.Streaming.StreamProvider
  langs:
  - csharp
  - vb
  name: CreateStreamAsync(ITorrentManagerFile, CancellationToken)
  nameWithType: StreamProvider.CreateStreamAsync(ITorrentManagerFile, CancellationToken)
  fullName: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/Streaming/StreamProvider.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CreateStreamAsync
    path: src/Streaming/StreamProvider.cs
    startLine: 76
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Streaming
  summary: >-
    Creates a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> which can be used to access the given <xref href="MonoTorrent.TorrentFile" data-throw-if-not-resolved="false"></xref>

    while it is downloading. This stream is seekable and readable. The first and last pieces of

    this file will be buffered before the stream is created. Finally, this stream must be disposed

    before another stream can be created.
  example: []
  syntax:
    content: public Task<Stream> CreateStreamAsync(ITorrentManagerFile file, CancellationToken token)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: The file to open
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: ''
    content.vb: Public Function CreateStreamAsync(file As ITorrentManagerFile, token As CancellationToken) As Task(Of Stream)
  overload: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync*
- uid: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean)
  commentId: M:MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean)
  id: CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean)
  parent: MonoTorrent.Streaming.StreamProvider
  langs:
  - csharp
  - vb
  name: CreateStreamAsync(ITorrentManagerFile, bool)
  nameWithType: StreamProvider.CreateStreamAsync(ITorrentManagerFile, bool)
  fullName: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile, bool)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/Streaming/StreamProvider.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CreateStreamAsync
    path: src/Streaming/StreamProvider.cs
    startLine: 88
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Streaming
  summary: >-
    Creates a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> which can be used to access the given <xref href="MonoTorrent.TorrentFile" data-throw-if-not-resolved="false"></xref>

    while it is downloading. This stream is seekable and readable. The first and last pieces of

    this file will be buffered before the stream is created if <code class="paramref">prebuffer</code> is

    set to true. Finally, this stream must be disposed before another stream can be created.
  example: []
  syntax:
    content: public Task<Stream> CreateStreamAsync(ITorrentManagerFile file, bool prebuffer)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: The file to open
    - id: prebuffer
      type: System.Boolean
      description: True if the first and last piece should be downloaded before the Stream is created.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: ''
    content.vb: Public Function CreateStreamAsync(file As ITorrentManagerFile, prebuffer As Boolean) As Task(Of Stream)
  overload: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync*
  nameWithType.vb: StreamProvider.CreateStreamAsync(ITorrentManagerFile, Boolean)
  fullName.vb: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile, Boolean)
  name.vb: CreateStreamAsync(ITorrentManagerFile, Boolean)
- uid: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean,System.Threading.CancellationToken)
  commentId: M:MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean,System.Threading.CancellationToken)
  id: CreateStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean,System.Threading.CancellationToken)
  parent: MonoTorrent.Streaming.StreamProvider
  langs:
  - csharp
  - vb
  name: CreateStreamAsync(ITorrentManagerFile, bool, CancellationToken)
  nameWithType: StreamProvider.CreateStreamAsync(ITorrentManagerFile, bool, CancellationToken)
  fullName: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/Streaming/StreamProvider.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CreateStreamAsync
    path: src/Streaming/StreamProvider.cs
    startLine: 101
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Streaming
  summary: >-
    Creates a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> which can be used to access the given <xref href="MonoTorrent.TorrentFile" data-throw-if-not-resolved="false"></xref>

    while it is downloading. This stream is seekable and readable. The first and last pieces of

    this file will be buffered before the stream is created if <code class="paramref">prebuffer</code> is

    set to true. Finally, this stream must be disposed before another stream can be created.
  example: []
  syntax:
    content: public Task<Stream> CreateStreamAsync(ITorrentManagerFile file, bool prebuffer, CancellationToken token)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: The file to open
    - id: prebuffer
      type: System.Boolean
      description: True if the first and last piece should be downloaded before the Stream is created.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: ''
    content.vb: Public Function CreateStreamAsync(file As ITorrentManagerFile, prebuffer As Boolean, token As CancellationToken) As Task(Of Stream)
  overload: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync*
  nameWithType.vb: StreamProvider.CreateStreamAsync(ITorrentManagerFile, Boolean, CancellationToken)
  fullName.vb: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.ITorrentManagerFile, Boolean, System.Threading.CancellationToken)
  name.vb: CreateStreamAsync(ITorrentManagerFile, Boolean, CancellationToken)
- uid: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile)
  commentId: M:MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile)
  id: CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile)
  parent: MonoTorrent.Streaming.StreamProvider
  langs:
  - csharp
  - vb
  name: CreateHttpStreamAsync(ITorrentManagerFile)
  nameWithType: StreamProvider.CreateHttpStreamAsync(ITorrentManagerFile)
  fullName: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/Streaming/StreamProvider.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CreateHttpStreamAsync
    path: src/Streaming/StreamProvider.cs
    startLine: 136
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Streaming
  summary: >-
    Creates a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> which can be used to access the given <xref href="MonoTorrent.TorrentFile" data-throw-if-not-resolved="false"></xref>

    while it is downloading. This stream is seekable and readable. This stream must be disposed

    before another stream can be created.
  example: []
  syntax:
    content: public Task<IHttpStream> CreateHttpStreamAsync(ITorrentManagerFile file)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: The file to open
    return:
      type: System.Threading.Tasks.Task{MonoTorrent.Streaming.IHttpStream}
      description: ''
    content.vb: Public Function CreateHttpStreamAsync(file As ITorrentManagerFile) As Task(Of IHttpStream)
  overload: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync*
- uid: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Threading.CancellationToken)
  commentId: M:MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Threading.CancellationToken)
  id: CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Threading.CancellationToken)
  parent: MonoTorrent.Streaming.StreamProvider
  langs:
  - csharp
  - vb
  name: CreateHttpStreamAsync(ITorrentManagerFile, CancellationToken)
  nameWithType: StreamProvider.CreateHttpStreamAsync(ITorrentManagerFile, CancellationToken)
  fullName: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/Streaming/StreamProvider.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CreateHttpStreamAsync
    path: src/Streaming/StreamProvider.cs
    startLine: 147
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Streaming
  summary: >-
    Creates a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> which can be used to access the given <xref href="MonoTorrent.TorrentFile" data-throw-if-not-resolved="false"></xref>

    while it is downloading. This stream is seekable and readable. This stream must be disposed

    before another stream can be created.
  example: []
  syntax:
    content: public Task<IHttpStream> CreateHttpStreamAsync(ITorrentManagerFile file, CancellationToken token)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: The file to open
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{MonoTorrent.Streaming.IHttpStream}
      description: ''
    content.vb: Public Function CreateHttpStreamAsync(file As ITorrentManagerFile, token As CancellationToken) As Task(Of IHttpStream)
  overload: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync*
- uid: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean)
  commentId: M:MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean)
  id: CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean)
  parent: MonoTorrent.Streaming.StreamProvider
  langs:
  - csharp
  - vb
  name: CreateHttpStreamAsync(ITorrentManagerFile, bool)
  nameWithType: StreamProvider.CreateHttpStreamAsync(ITorrentManagerFile, bool)
  fullName: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile, bool)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/Streaming/StreamProvider.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CreateHttpStreamAsync
    path: src/Streaming/StreamProvider.cs
    startLine: 158
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Streaming
  summary: >-
    Creates a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> which can be used to access the given <xref href="MonoTorrent.TorrentFile" data-throw-if-not-resolved="false"></xref>

    while it is downloading. This stream is seekable and readable. This stream must be disposed

    before another stream can be created.
  example: []
  syntax:
    content: public Task<IHttpStream> CreateHttpStreamAsync(ITorrentManagerFile file, bool prebuffer)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: The file to open
    - id: prebuffer
      type: System.Boolean
      description: True if the first and last piece should be downloaded before the Stream is created.
    return:
      type: System.Threading.Tasks.Task{MonoTorrent.Streaming.IHttpStream}
      description: ''
    content.vb: Public Function CreateHttpStreamAsync(file As ITorrentManagerFile, prebuffer As Boolean) As Task(Of IHttpStream)
  overload: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync*
  nameWithType.vb: StreamProvider.CreateHttpStreamAsync(ITorrentManagerFile, Boolean)
  fullName.vb: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile, Boolean)
  name.vb: CreateHttpStreamAsync(ITorrentManagerFile, Boolean)
- uid: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean,System.Threading.CancellationToken)
  commentId: M:MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean,System.Threading.CancellationToken)
  id: CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile,System.Boolean,System.Threading.CancellationToken)
  parent: MonoTorrent.Streaming.StreamProvider
  langs:
  - csharp
  - vb
  name: CreateHttpStreamAsync(ITorrentManagerFile, bool, CancellationToken)
  nameWithType: StreamProvider.CreateHttpStreamAsync(ITorrentManagerFile, bool, CancellationToken)
  fullName: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: MonoTorrent/src/Streaming/StreamProvider.cs
      branch: dev
      repo: https://github.com/KA4I/TorrentCycle.git
    id: CreateHttpStreamAsync
    path: src/Streaming/StreamProvider.cs
    startLine: 172
  assemblies:
  - MonoTorrent
  namespace: MonoTorrent.Streaming
  summary: >-
    Creates a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> which can be used to access the given <xref href="MonoTorrent.TorrentFile" data-throw-if-not-resolved="false"></xref>

    while it is downloading. This stream is seekable and readable. This stream must be disposed

    before another stream can be created.
  example: []
  syntax:
    content: public Task<IHttpStream> CreateHttpStreamAsync(ITorrentManagerFile file, bool prebuffer, CancellationToken token)
    parameters:
    - id: file
      type: MonoTorrent.ITorrentManagerFile
      description: The file to open
    - id: prebuffer
      type: System.Boolean
      description: True if the first and last piece should be downloaded before the Stream is created.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{MonoTorrent.Streaming.IHttpStream}
      description: ''
    content.vb: Public Function CreateHttpStreamAsync(file As ITorrentManagerFile, prebuffer As Boolean, token As CancellationToken) As Task(Of IHttpStream)
  overload: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync*
  nameWithType.vb: StreamProvider.CreateHttpStreamAsync(ITorrentManagerFile, Boolean, CancellationToken)
  fullName.vb: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.ITorrentManagerFile, Boolean, System.Threading.CancellationToken)
  name.vb: CreateHttpStreamAsync(ITorrentManagerFile, Boolean, CancellationToken)
references:
- uid: MonoTorrent.Streaming
  commentId: N:MonoTorrent.Streaming
  href: MonoTorrent.html
  name: MonoTorrent.Streaming
  nameWithType: MonoTorrent.Streaming
  fullName: MonoTorrent.Streaming
  spec.csharp:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.Streaming
    name: Streaming
    href: MonoTorrent.Streaming.html
  spec.vb:
  - uid: MonoTorrent
    name: MonoTorrent
    href: MonoTorrent.html
  - name: .
  - uid: MonoTorrent.Streaming
    name: Streaming
    href: MonoTorrent.Streaming.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: MonoTorrent.TorrentFile
  commentId: T:MonoTorrent.TorrentFile
  parent: MonoTorrent
  href: MonoTorrent.TorrentFile.html
  name: TorrentFile
  nameWithType: TorrentFile
  fullName: MonoTorrent.TorrentFile
- uid: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync*
  commentId: Overload:MonoTorrent.Streaming.StreamProvider.CreateStreamAsync
  href: MonoTorrent.Streaming.StreamProvider.html#MonoTorrent_Streaming_StreamProvider_CreateStreamAsync_MonoTorrent_ITorrentManagerFile_
  name: CreateStreamAsync
  nameWithType: StreamProvider.CreateStreamAsync
  fullName: MonoTorrent.Streaming.StreamProvider.CreateStreamAsync
- uid: MonoTorrent.ITorrentManagerFile
  commentId: T:MonoTorrent.ITorrentManagerFile
  parent: MonoTorrent
  href: MonoTorrent.ITorrentManagerFile.html
  name: ITorrentManagerFile
  nameWithType: ITorrentManagerFile
  fullName: MonoTorrent.ITorrentManagerFile
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: MonoTorrent
  commentId: N:MonoTorrent
  href: MonoTorrent.html
  name: MonoTorrent
  nameWithType: MonoTorrent
  fullName: MonoTorrent
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync*
  commentId: Overload:MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync
  href: MonoTorrent.Streaming.StreamProvider.html#MonoTorrent_Streaming_StreamProvider_CreateHttpStreamAsync_MonoTorrent_ITorrentManagerFile_
  name: CreateHttpStreamAsync
  nameWithType: StreamProvider.CreateHttpStreamAsync
  fullName: MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync
- uid: System.Threading.Tasks.Task{MonoTorrent.Streaming.IHttpStream}
  commentId: T:System.Threading.Tasks.Task{MonoTorrent.Streaming.IHttpStream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IHttpStream>
  nameWithType: Task<IHttpStream>
  fullName: System.Threading.Tasks.Task<MonoTorrent.Streaming.IHttpStream>
  nameWithType.vb: Task(Of IHttpStream)
  fullName.vb: System.Threading.Tasks.Task(Of MonoTorrent.Streaming.IHttpStream)
  name.vb: Task(Of IHttpStream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: MonoTorrent.Streaming.IHttpStream
    name: IHttpStream
    href: MonoTorrent.Streaming.IHttpStream.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: MonoTorrent.Streaming.IHttpStream
    name: IHttpStream
    href: MonoTorrent.Streaming.IHttpStream.html
  - name: )
